// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "linkbase.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace LinkBase {

namespace {

const ::google::protobuf::Descriptor* LinkBaseAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinkBaseAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* LinkBaseAttr_CrawlHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinkBaseAttr_CrawlHistory_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_linkbase_2eproto() {
  protobuf_AddDesc_linkbase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "linkbase.proto");
  GOOGLE_CHECK(file != NULL);
  LinkBaseAttr_descriptor_ = file->message_type(0);
  static const int LinkBaseAttr_offsets_[68] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, anchor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, contentmd5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, etagmd5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, foundtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, parentpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, innerlinksmd5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, normalcrawlhis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, othercrawlhis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, hubcrawlhis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, innerlinksnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, asseedlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, pagepublishdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, linksnumafterbloomfilter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, normalizedurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, linksnumafterlinkfilter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, durl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, outerlinksnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, browseuv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, searchuv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, isnewlink_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, downloadtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, manualimporttag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, pagelanguage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, parentbrowseuv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, pagerank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, parentpagerank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, extends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, pagesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, outeranchorlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, scheduletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, errno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, bestinnerlinkshrefpattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, initparentpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, delreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, orglinknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, browsepv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, cndepth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, parentpagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, parentdownloadtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, httpcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, inneranchorlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, latestfoundtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, linksnumafterqssfilter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, linksnumafternormalized_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, downloadtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, contentsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, parentsearchuv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, deltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, parentpagedepth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, pagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, linksnumafterrobotsfilter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, deadpagetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, deadlinktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, offlinepagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, firstdownloadtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, fanyetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, deadlinkadjustschedulepriority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, garbagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, pagemodifydate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, childnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, goodchildnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, goodparentstatnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, isexpired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, parentseedlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, forbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, isinindex_),
  };
  LinkBaseAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LinkBaseAttr_descriptor_,
      LinkBaseAttr::default_instance_,
      LinkBaseAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LinkBaseAttr));
  LinkBaseAttr_CrawlHistory_descriptor_ = LinkBaseAttr_descriptor_->nested_type(0);
  static const int LinkBaseAttr_CrawlHistory_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr_CrawlHistory, downloadtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr_CrawlHistory, httpcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr_CrawlHistory, contentmd5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr_CrawlHistory, innerlinksmd5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr_CrawlHistory, contentsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr_CrawlHistory, innerlinksnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr_CrawlHistory, inneranchorlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr_CrawlHistory, outerlinksnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr_CrawlHistory, outeranchorlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr_CrawlHistory, etagmd5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr_CrawlHistory, newchildlinksnumforself_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr_CrawlHistory, goodchildlinksnumforself_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr_CrawlHistory, newchildlinksnumforall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr_CrawlHistory, goodchildlinksnumforall_),
  };
  LinkBaseAttr_CrawlHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LinkBaseAttr_CrawlHistory_descriptor_,
      LinkBaseAttr_CrawlHistory::default_instance_,
      LinkBaseAttr_CrawlHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr_CrawlHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkBaseAttr_CrawlHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LinkBaseAttr_CrawlHistory));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_linkbase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LinkBaseAttr_descriptor_, &LinkBaseAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LinkBaseAttr_CrawlHistory_descriptor_, &LinkBaseAttr_CrawlHistory::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_linkbase_2eproto() {
  delete LinkBaseAttr::default_instance_;
  delete LinkBaseAttr_reflection_;
  delete LinkBaseAttr_CrawlHistory::default_instance_;
  delete LinkBaseAttr_CrawlHistory_reflection_;
}

void protobuf_AddDesc_linkbase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016linkbase.proto\022\010LinkBase\"\346\017\n\014LinkBaseA"
    "ttr\022\016\n\006anchor\030\001 \001(\t\022\022\n\ncontentMD5\030\002 \003(\006\022"
    "\r\n\005depth\030\003 \001(\005\022\017\n\007etagMD5\030\004 \003(\006\022\021\n\tfound"
    "Time\030\005 \001(\r\022\022\n\nparentPage\030\006 \001(\t\022\025\n\rinnerL"
    "inksMD5\030\007 \003(\006\022;\n\016normalCrawlHis\030\010 \003(\0132#."
    "LinkBase.LinkBaseAttr.CrawlHistory\022:\n\rot"
    "herCrawlHis\030\t \003(\0132#.LinkBase.LinkBaseAtt"
    "r.CrawlHistory\0228\n\013hubCrawlHis\030\n \003(\0132#.Li"
    "nkBase.LinkBaseAttr.CrawlHistory\022\025\n\rinne"
    "rLinksNum\030\013 \001(\005\022\023\n\013asSeedLevel\030\014 \001(\005\022\027\n\017"
    "pagePublishDate\030\r \001(\r\022 \n\030linksNumAfterBl"
    "oomFilter\030\016 \001(\005\022\025\n\rnormalizedUrl\030\017 \001(\t\022\037"
    "\n\027linksNumAfterLinkFilter\030\020 \001(\005\022\014\n\004durl\030"
    "\021 \001(\t\022\025\n\routerLinksNum\030\022 \001(\005\022\020\n\010browseUV"
    "\030\023 \001(\003\022\020\n\010searchUV\030\024 \001(\003\022\021\n\tisNewLink\030\025 "
    "\001(\010\022\024\n\014downloadType\030\026 \001(\t\022\027\n\017manualImpor"
    "tTag\030\027 \001(\t\022\024\n\014pageLanguage\030\030 \001(\t\022\026\n\016pare"
    "ntBrowseUV\030\031 \001(\003\022\020\n\010pageRank\030\032 \001(\t\022\026\n\016pa"
    "rentPageRank\030\033 \001(\t\022\017\n\007extends\030\034 \001(\t\022\020\n\010p"
    "ageSize\030\035 \001(\005\022\016\n\006opType\030\036 \001(\t\022\031\n\021outerAn"
    "chorLength\030\037 \001(\005\022\024\n\014scheduleTime\030  \001(\r\022\r"
    "\n\005errno\030! \001(\005\022!\n\031bestInnerLinksHrefPatte"
    "rn\030\" \001(\t\022\026\n\016initParentPage\030# \001(\t\022\021\n\tdelR"
    "eason\030$ \001(\t\022\022\n\norgLinkNum\030% \001(\005\022\020\n\010brows"
    "ePV\030& \001(\003\022\017\n\007cnDepth\030\' \001(\005\022\026\n\016parentPage"
    "Type\030( \001(\t\022\032\n\022parentDownloadTime\030) \001(\r\022\020"
    "\n\010httpCode\030* \001(\021\022\031\n\021innerAnchorLength\030+ "
    "\001(\005\022\027\n\017latestFoundTime\030, \001(\r\022\036\n\026linksNum"
    "AfterQssFilter\030- \001(\005\022\037\n\027linksNumAfterNor"
    "malized\030. \001(\005\022\024\n\014downloadTime\030/ \001(\r\022\023\n\013c"
    "ontentSize\0300 \001(\005\022\026\n\016parentSearchUV\0301 \001(\003"
    "\022\017\n\007delTime\0302 \001(\r\022\027\n\017parentPageDepth\0303 \001"
    "(\005\022\020\n\010pageType\0304 \001(\t\022!\n\031linksNumAfterRob"
    "otsFilter\0305 \001(\005\022\024\n\014deadPageTime\0306 \001(\r\022\024\n"
    "\014deadLinkTime\0307 \001(\r\022\027\n\017offlinePageType\0308"
    " \001(\005\022\031\n\021firstDownloadTime\0309 \001(\r\022\021\n\tfanye"
    "Type\030: \001(\005\022&\n\036deadLinkAdjustSchedulePrio"
    "rity\030; \001(\005\022\023\n\013garbageType\030< \001(\t\022\026\n\016pageM"
    "odifyDate\030= \001(\r\022\020\n\010childNum\030> \001(\005\022\024\n\014goo"
    "dChildNum\030\? \001(\005\022\031\n\021goodParentStatNum\030@ \001"
    "(\005\022\021\n\tisExpired\030A \001(\010\022\027\n\017parentSeedLevel"
    "\030B \001(\005\022\016\n\006forbid\030C \001(\005\022\021\n\tisInIndex\030D \001("
    "\010\032\357\002\n\014CrawlHistory\022\024\n\014downloadTime\030\001 \001(\r"
    "\022\020\n\010httpCode\030\002 \001(\021\022\022\n\ncontentMD5\030\003 \003(\006\022\025"
    "\n\rinnerLinksMD5\030\004 \003(\006\022\023\n\013contentSize\030\005 \001"
    "(\005\022\025\n\rinnerLinksNum\030\006 \001(\005\022\031\n\021innerAnchor"
    "Length\030\007 \001(\005\022\025\n\routerLinksNum\030\010 \001(\005\022\031\n\021o"
    "uterAnchorLength\030\t \001(\005\022\017\n\007etagMD5\030\n \003(\006\022"
    "\037\n\027newChildLinksNumForSelf\030\013 \001(\005\022 \n\030good"
    "ChildLinksNumForSelf\030\014 \001(\005\022\036\n\026newChildLi"
    "nksNumForAll\030\r \001(\005\022\037\n\027goodChildLinksNumF"
    "orAll\030\016 \001(\005B;\n)com.bradenwu.search.spide"
    "r.hbase.linkbaseB\016LinkBaseProtos", 2112);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "linkbase.proto", &protobuf_RegisterTypes);
  LinkBaseAttr::default_instance_ = new LinkBaseAttr();
  LinkBaseAttr_CrawlHistory::default_instance_ = new LinkBaseAttr_CrawlHistory();
  LinkBaseAttr::default_instance_->InitAsDefaultInstance();
  LinkBaseAttr_CrawlHistory::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_linkbase_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_linkbase_2eproto {
  StaticDescriptorInitializer_linkbase_2eproto() {
    protobuf_AddDesc_linkbase_2eproto();
  }
} static_descriptor_initializer_linkbase_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int LinkBaseAttr_CrawlHistory::kDownloadTimeFieldNumber;
const int LinkBaseAttr_CrawlHistory::kHttpCodeFieldNumber;
const int LinkBaseAttr_CrawlHistory::kContentMD5FieldNumber;
const int LinkBaseAttr_CrawlHistory::kInnerLinksMD5FieldNumber;
const int LinkBaseAttr_CrawlHistory::kContentSizeFieldNumber;
const int LinkBaseAttr_CrawlHistory::kInnerLinksNumFieldNumber;
const int LinkBaseAttr_CrawlHistory::kInnerAnchorLengthFieldNumber;
const int LinkBaseAttr_CrawlHistory::kOuterLinksNumFieldNumber;
const int LinkBaseAttr_CrawlHistory::kOuterAnchorLengthFieldNumber;
const int LinkBaseAttr_CrawlHistory::kEtagMD5FieldNumber;
const int LinkBaseAttr_CrawlHistory::kNewChildLinksNumForSelfFieldNumber;
const int LinkBaseAttr_CrawlHistory::kGoodChildLinksNumForSelfFieldNumber;
const int LinkBaseAttr_CrawlHistory::kNewChildLinksNumForAllFieldNumber;
const int LinkBaseAttr_CrawlHistory::kGoodChildLinksNumForAllFieldNumber;
#endif  // !_MSC_VER

LinkBaseAttr_CrawlHistory::LinkBaseAttr_CrawlHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LinkBaseAttr_CrawlHistory::InitAsDefaultInstance() {
}

LinkBaseAttr_CrawlHistory::LinkBaseAttr_CrawlHistory(const LinkBaseAttr_CrawlHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LinkBaseAttr_CrawlHistory::SharedCtor() {
  _cached_size_ = 0;
  downloadtime_ = 0u;
  httpcode_ = 0;
  contentsize_ = 0;
  innerlinksnum_ = 0;
  inneranchorlength_ = 0;
  outerlinksnum_ = 0;
  outeranchorlength_ = 0;
  newchildlinksnumforself_ = 0;
  goodchildlinksnumforself_ = 0;
  newchildlinksnumforall_ = 0;
  goodchildlinksnumforall_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LinkBaseAttr_CrawlHistory::~LinkBaseAttr_CrawlHistory() {
  SharedDtor();
}

void LinkBaseAttr_CrawlHistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LinkBaseAttr_CrawlHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkBaseAttr_CrawlHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinkBaseAttr_CrawlHistory_descriptor_;
}

const LinkBaseAttr_CrawlHistory& LinkBaseAttr_CrawlHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_linkbase_2eproto();  return *default_instance_;
}

LinkBaseAttr_CrawlHistory* LinkBaseAttr_CrawlHistory::default_instance_ = NULL;

LinkBaseAttr_CrawlHistory* LinkBaseAttr_CrawlHistory::New() const {
  return new LinkBaseAttr_CrawlHistory;
}

void LinkBaseAttr_CrawlHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    downloadtime_ = 0u;
    httpcode_ = 0;
    contentsize_ = 0;
    innerlinksnum_ = 0;
    inneranchorlength_ = 0;
    outerlinksnum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    outeranchorlength_ = 0;
    newchildlinksnumforself_ = 0;
    goodchildlinksnumforself_ = 0;
    newchildlinksnumforall_ = 0;
    goodchildlinksnumforall_ = 0;
  }
  contentmd5_.Clear();
  innerlinksmd5_.Clear();
  etagmd5_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LinkBaseAttr_CrawlHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 downloadTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &downloadtime_)));
          set_has_downloadtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_httpCode;
        break;
      }
      
      // optional sint32 httpCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_httpCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &httpcode_)));
          set_has_httpcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_contentMD5;
        break;
      }
      
      // repeated fixed64 contentMD5 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_contentMD5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25, input, this->mutable_contentmd5())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_contentmd5())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_contentMD5;
        if (input->ExpectTag(33)) goto parse_innerLinksMD5;
        break;
      }
      
      // repeated fixed64 innerLinksMD5 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_innerLinksMD5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 33, input, this->mutable_innerlinksmd5())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_innerlinksmd5())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_innerLinksMD5;
        if (input->ExpectTag(40)) goto parse_contentSize;
        break;
      }
      
      // optional int32 contentSize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contentSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contentsize_)));
          set_has_contentsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_innerLinksNum;
        break;
      }
      
      // optional int32 innerLinksNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_innerLinksNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &innerlinksnum_)));
          set_has_innerlinksnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_innerAnchorLength;
        break;
      }
      
      // optional int32 innerAnchorLength = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_innerAnchorLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inneranchorlength_)));
          set_has_inneranchorlength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_outerLinksNum;
        break;
      }
      
      // optional int32 outerLinksNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outerLinksNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outerlinksnum_)));
          set_has_outerlinksnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_outerAnchorLength;
        break;
      }
      
      // optional int32 outerAnchorLength = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outerAnchorLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outeranchorlength_)));
          set_has_outeranchorlength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_etagMD5;
        break;
      }
      
      // repeated fixed64 etagMD5 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_etagMD5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 81, input, this->mutable_etagmd5())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_etagmd5())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_etagMD5;
        if (input->ExpectTag(88)) goto parse_newChildLinksNumForSelf;
        break;
      }
      
      // optional int32 newChildLinksNumForSelf = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newChildLinksNumForSelf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newchildlinksnumforself_)));
          set_has_newchildlinksnumforself();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_goodChildLinksNumForSelf;
        break;
      }
      
      // optional int32 goodChildLinksNumForSelf = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goodChildLinksNumForSelf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodchildlinksnumforself_)));
          set_has_goodchildlinksnumforself();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_newChildLinksNumForAll;
        break;
      }
      
      // optional int32 newChildLinksNumForAll = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newChildLinksNumForAll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newchildlinksnumforall_)));
          set_has_newchildlinksnumforall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_goodChildLinksNumForAll;
        break;
      }
      
      // optional int32 goodChildLinksNumForAll = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goodChildLinksNumForAll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodchildlinksnumforall_)));
          set_has_goodchildlinksnumforall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LinkBaseAttr_CrawlHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 downloadTime = 1;
  if (has_downloadtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->downloadtime(), output);
  }
  
  // optional sint32 httpCode = 2;
  if (has_httpcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->httpcode(), output);
  }
  
  // repeated fixed64 contentMD5 = 3;
  for (int i = 0; i < this->contentmd5_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->contentmd5(i), output);
  }
  
  // repeated fixed64 innerLinksMD5 = 4;
  for (int i = 0; i < this->innerlinksmd5_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      4, this->innerlinksmd5(i), output);
  }
  
  // optional int32 contentSize = 5;
  if (has_contentsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->contentsize(), output);
  }
  
  // optional int32 innerLinksNum = 6;
  if (has_innerlinksnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->innerlinksnum(), output);
  }
  
  // optional int32 innerAnchorLength = 7;
  if (has_inneranchorlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->inneranchorlength(), output);
  }
  
  // optional int32 outerLinksNum = 8;
  if (has_outerlinksnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->outerlinksnum(), output);
  }
  
  // optional int32 outerAnchorLength = 9;
  if (has_outeranchorlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->outeranchorlength(), output);
  }
  
  // repeated fixed64 etagMD5 = 10;
  for (int i = 0; i < this->etagmd5_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      10, this->etagmd5(i), output);
  }
  
  // optional int32 newChildLinksNumForSelf = 11;
  if (has_newchildlinksnumforself()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->newchildlinksnumforself(), output);
  }
  
  // optional int32 goodChildLinksNumForSelf = 12;
  if (has_goodchildlinksnumforself()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->goodchildlinksnumforself(), output);
  }
  
  // optional int32 newChildLinksNumForAll = 13;
  if (has_newchildlinksnumforall()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->newchildlinksnumforall(), output);
  }
  
  // optional int32 goodChildLinksNumForAll = 14;
  if (has_goodchildlinksnumforall()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->goodchildlinksnumforall(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LinkBaseAttr_CrawlHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 downloadTime = 1;
  if (has_downloadtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->downloadtime(), target);
  }
  
  // optional sint32 httpCode = 2;
  if (has_httpcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->httpcode(), target);
  }
  
  // repeated fixed64 contentMD5 = 3;
  for (int i = 0; i < this->contentmd5_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(3, this->contentmd5(i), target);
  }
  
  // repeated fixed64 innerLinksMD5 = 4;
  for (int i = 0; i < this->innerlinksmd5_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(4, this->innerlinksmd5(i), target);
  }
  
  // optional int32 contentSize = 5;
  if (has_contentsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->contentsize(), target);
  }
  
  // optional int32 innerLinksNum = 6;
  if (has_innerlinksnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->innerlinksnum(), target);
  }
  
  // optional int32 innerAnchorLength = 7;
  if (has_inneranchorlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->inneranchorlength(), target);
  }
  
  // optional int32 outerLinksNum = 8;
  if (has_outerlinksnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->outerlinksnum(), target);
  }
  
  // optional int32 outerAnchorLength = 9;
  if (has_outeranchorlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->outeranchorlength(), target);
  }
  
  // repeated fixed64 etagMD5 = 10;
  for (int i = 0; i < this->etagmd5_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(10, this->etagmd5(i), target);
  }
  
  // optional int32 newChildLinksNumForSelf = 11;
  if (has_newchildlinksnumforself()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->newchildlinksnumforself(), target);
  }
  
  // optional int32 goodChildLinksNumForSelf = 12;
  if (has_goodchildlinksnumforself()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->goodchildlinksnumforself(), target);
  }
  
  // optional int32 newChildLinksNumForAll = 13;
  if (has_newchildlinksnumforall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->newchildlinksnumforall(), target);
  }
  
  // optional int32 goodChildLinksNumForAll = 14;
  if (has_goodchildlinksnumforall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->goodchildlinksnumforall(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LinkBaseAttr_CrawlHistory::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 downloadTime = 1;
    if (has_downloadtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->downloadtime());
    }
    
    // optional sint32 httpCode = 2;
    if (has_httpcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->httpcode());
    }
    
    // optional int32 contentSize = 5;
    if (has_contentsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contentsize());
    }
    
    // optional int32 innerLinksNum = 6;
    if (has_innerlinksnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->innerlinksnum());
    }
    
    // optional int32 innerAnchorLength = 7;
    if (has_inneranchorlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inneranchorlength());
    }
    
    // optional int32 outerLinksNum = 8;
    if (has_outerlinksnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outerlinksnum());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 outerAnchorLength = 9;
    if (has_outeranchorlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outeranchorlength());
    }
    
    // optional int32 newChildLinksNumForSelf = 11;
    if (has_newchildlinksnumforself()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newchildlinksnumforself());
    }
    
    // optional int32 goodChildLinksNumForSelf = 12;
    if (has_goodchildlinksnumforself()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodchildlinksnumforself());
    }
    
    // optional int32 newChildLinksNumForAll = 13;
    if (has_newchildlinksnumforall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newchildlinksnumforall());
    }
    
    // optional int32 goodChildLinksNumForAll = 14;
    if (has_goodchildlinksnumforall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodchildlinksnumforall());
    }
    
  }
  // repeated fixed64 contentMD5 = 3;
  {
    int data_size = 0;
    data_size = 8 * this->contentmd5_size();
    total_size += 1 * this->contentmd5_size() + data_size;
  }
  
  // repeated fixed64 innerLinksMD5 = 4;
  {
    int data_size = 0;
    data_size = 8 * this->innerlinksmd5_size();
    total_size += 1 * this->innerlinksmd5_size() + data_size;
  }
  
  // repeated fixed64 etagMD5 = 10;
  {
    int data_size = 0;
    data_size = 8 * this->etagmd5_size();
    total_size += 1 * this->etagmd5_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkBaseAttr_CrawlHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LinkBaseAttr_CrawlHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LinkBaseAttr_CrawlHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LinkBaseAttr_CrawlHistory::MergeFrom(const LinkBaseAttr_CrawlHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  contentmd5_.MergeFrom(from.contentmd5_);
  innerlinksmd5_.MergeFrom(from.innerlinksmd5_);
  etagmd5_.MergeFrom(from.etagmd5_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_downloadtime()) {
      set_downloadtime(from.downloadtime());
    }
    if (from.has_httpcode()) {
      set_httpcode(from.httpcode());
    }
    if (from.has_contentsize()) {
      set_contentsize(from.contentsize());
    }
    if (from.has_innerlinksnum()) {
      set_innerlinksnum(from.innerlinksnum());
    }
    if (from.has_inneranchorlength()) {
      set_inneranchorlength(from.inneranchorlength());
    }
    if (from.has_outerlinksnum()) {
      set_outerlinksnum(from.outerlinksnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_outeranchorlength()) {
      set_outeranchorlength(from.outeranchorlength());
    }
    if (from.has_newchildlinksnumforself()) {
      set_newchildlinksnumforself(from.newchildlinksnumforself());
    }
    if (from.has_goodchildlinksnumforself()) {
      set_goodchildlinksnumforself(from.goodchildlinksnumforself());
    }
    if (from.has_newchildlinksnumforall()) {
      set_newchildlinksnumforall(from.newchildlinksnumforall());
    }
    if (from.has_goodchildlinksnumforall()) {
      set_goodchildlinksnumforall(from.goodchildlinksnumforall());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LinkBaseAttr_CrawlHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkBaseAttr_CrawlHistory::CopyFrom(const LinkBaseAttr_CrawlHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkBaseAttr_CrawlHistory::IsInitialized() const {
  
  return true;
}

void LinkBaseAttr_CrawlHistory::Swap(LinkBaseAttr_CrawlHistory* other) {
  if (other != this) {
    std::swap(downloadtime_, other->downloadtime_);
    std::swap(httpcode_, other->httpcode_);
    contentmd5_.Swap(&other->contentmd5_);
    innerlinksmd5_.Swap(&other->innerlinksmd5_);
    std::swap(contentsize_, other->contentsize_);
    std::swap(innerlinksnum_, other->innerlinksnum_);
    std::swap(inneranchorlength_, other->inneranchorlength_);
    std::swap(outerlinksnum_, other->outerlinksnum_);
    std::swap(outeranchorlength_, other->outeranchorlength_);
    etagmd5_.Swap(&other->etagmd5_);
    std::swap(newchildlinksnumforself_, other->newchildlinksnumforself_);
    std::swap(goodchildlinksnumforself_, other->goodchildlinksnumforself_);
    std::swap(newchildlinksnumforall_, other->newchildlinksnumforall_);
    std::swap(goodchildlinksnumforall_, other->goodchildlinksnumforall_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LinkBaseAttr_CrawlHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinkBaseAttr_CrawlHistory_descriptor_;
  metadata.reflection = LinkBaseAttr_CrawlHistory_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LinkBaseAttr::kAnchorFieldNumber;
const int LinkBaseAttr::kContentMD5FieldNumber;
const int LinkBaseAttr::kDepthFieldNumber;
const int LinkBaseAttr::kEtagMD5FieldNumber;
const int LinkBaseAttr::kFoundTimeFieldNumber;
const int LinkBaseAttr::kParentPageFieldNumber;
const int LinkBaseAttr::kInnerLinksMD5FieldNumber;
const int LinkBaseAttr::kNormalCrawlHisFieldNumber;
const int LinkBaseAttr::kOtherCrawlHisFieldNumber;
const int LinkBaseAttr::kHubCrawlHisFieldNumber;
const int LinkBaseAttr::kInnerLinksNumFieldNumber;
const int LinkBaseAttr::kAsSeedLevelFieldNumber;
const int LinkBaseAttr::kPagePublishDateFieldNumber;
const int LinkBaseAttr::kLinksNumAfterBloomFilterFieldNumber;
const int LinkBaseAttr::kNormalizedUrlFieldNumber;
const int LinkBaseAttr::kLinksNumAfterLinkFilterFieldNumber;
const int LinkBaseAttr::kDurlFieldNumber;
const int LinkBaseAttr::kOuterLinksNumFieldNumber;
const int LinkBaseAttr::kBrowseUVFieldNumber;
const int LinkBaseAttr::kSearchUVFieldNumber;
const int LinkBaseAttr::kIsNewLinkFieldNumber;
const int LinkBaseAttr::kDownloadTypeFieldNumber;
const int LinkBaseAttr::kManualImportTagFieldNumber;
const int LinkBaseAttr::kPageLanguageFieldNumber;
const int LinkBaseAttr::kParentBrowseUVFieldNumber;
const int LinkBaseAttr::kPageRankFieldNumber;
const int LinkBaseAttr::kParentPageRankFieldNumber;
const int LinkBaseAttr::kExtendsFieldNumber;
const int LinkBaseAttr::kPageSizeFieldNumber;
const int LinkBaseAttr::kOpTypeFieldNumber;
const int LinkBaseAttr::kOuterAnchorLengthFieldNumber;
const int LinkBaseAttr::kScheduleTimeFieldNumber;
const int LinkBaseAttr::kErrnoFieldNumber;
const int LinkBaseAttr::kBestInnerLinksHrefPatternFieldNumber;
const int LinkBaseAttr::kInitParentPageFieldNumber;
const int LinkBaseAttr::kDelReasonFieldNumber;
const int LinkBaseAttr::kOrgLinkNumFieldNumber;
const int LinkBaseAttr::kBrowsePVFieldNumber;
const int LinkBaseAttr::kCnDepthFieldNumber;
const int LinkBaseAttr::kParentPageTypeFieldNumber;
const int LinkBaseAttr::kParentDownloadTimeFieldNumber;
const int LinkBaseAttr::kHttpCodeFieldNumber;
const int LinkBaseAttr::kInnerAnchorLengthFieldNumber;
const int LinkBaseAttr::kLatestFoundTimeFieldNumber;
const int LinkBaseAttr::kLinksNumAfterQssFilterFieldNumber;
const int LinkBaseAttr::kLinksNumAfterNormalizedFieldNumber;
const int LinkBaseAttr::kDownloadTimeFieldNumber;
const int LinkBaseAttr::kContentSizeFieldNumber;
const int LinkBaseAttr::kParentSearchUVFieldNumber;
const int LinkBaseAttr::kDelTimeFieldNumber;
const int LinkBaseAttr::kParentPageDepthFieldNumber;
const int LinkBaseAttr::kPageTypeFieldNumber;
const int LinkBaseAttr::kLinksNumAfterRobotsFilterFieldNumber;
const int LinkBaseAttr::kDeadPageTimeFieldNumber;
const int LinkBaseAttr::kDeadLinkTimeFieldNumber;
const int LinkBaseAttr::kOfflinePageTypeFieldNumber;
const int LinkBaseAttr::kFirstDownloadTimeFieldNumber;
const int LinkBaseAttr::kFanyeTypeFieldNumber;
const int LinkBaseAttr::kDeadLinkAdjustSchedulePriorityFieldNumber;
const int LinkBaseAttr::kGarbageTypeFieldNumber;
const int LinkBaseAttr::kPageModifyDateFieldNumber;
const int LinkBaseAttr::kChildNumFieldNumber;
const int LinkBaseAttr::kGoodChildNumFieldNumber;
const int LinkBaseAttr::kGoodParentStatNumFieldNumber;
const int LinkBaseAttr::kIsExpiredFieldNumber;
const int LinkBaseAttr::kParentSeedLevelFieldNumber;
const int LinkBaseAttr::kForbidFieldNumber;
const int LinkBaseAttr::kIsInIndexFieldNumber;
#endif  // !_MSC_VER

LinkBaseAttr::LinkBaseAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LinkBaseAttr::InitAsDefaultInstance() {
}

LinkBaseAttr::LinkBaseAttr(const LinkBaseAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LinkBaseAttr::SharedCtor() {
  _cached_size_ = 0;
  anchor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  depth_ = 0;
  foundtime_ = 0u;
  parentpage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  innerlinksnum_ = 0;
  asseedlevel_ = 0;
  pagepublishdate_ = 0u;
  linksnumafterbloomfilter_ = 0;
  normalizedurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  linksnumafterlinkfilter_ = 0;
  durl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  outerlinksnum_ = 0;
  browseuv_ = GOOGLE_LONGLONG(0);
  searchuv_ = GOOGLE_LONGLONG(0);
  isnewlink_ = false;
  downloadtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  manualimporttag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pagelanguage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parentbrowseuv_ = GOOGLE_LONGLONG(0);
  pagerank_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parentpagerank_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extends_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pagesize_ = 0;
  optype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  outeranchorlength_ = 0;
  scheduletime_ = 0u;
  errno_ = 0;
  bestinnerlinkshrefpattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  initparentpage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  delreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orglinknum_ = 0;
  browsepv_ = GOOGLE_LONGLONG(0);
  cndepth_ = 0;
  parentpagetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parentdownloadtime_ = 0u;
  httpcode_ = 0;
  inneranchorlength_ = 0;
  latestfoundtime_ = 0u;
  linksnumafterqssfilter_ = 0;
  linksnumafternormalized_ = 0;
  downloadtime_ = 0u;
  contentsize_ = 0;
  parentsearchuv_ = GOOGLE_LONGLONG(0);
  deltime_ = 0u;
  parentpagedepth_ = 0;
  pagetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  linksnumafterrobotsfilter_ = 0;
  deadpagetime_ = 0u;
  deadlinktime_ = 0u;
  offlinepagetype_ = 0;
  firstdownloadtime_ = 0u;
  fanyetype_ = 0;
  deadlinkadjustschedulepriority_ = 0;
  garbagetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pagemodifydate_ = 0u;
  childnum_ = 0;
  goodchildnum_ = 0;
  goodparentstatnum_ = 0;
  isexpired_ = false;
  parentseedlevel_ = 0;
  forbid_ = 0;
  isinindex_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LinkBaseAttr::~LinkBaseAttr() {
  SharedDtor();
}

void LinkBaseAttr::SharedDtor() {
  if (anchor_ != &::google::protobuf::internal::kEmptyString) {
    delete anchor_;
  }
  if (parentpage_ != &::google::protobuf::internal::kEmptyString) {
    delete parentpage_;
  }
  if (normalizedurl_ != &::google::protobuf::internal::kEmptyString) {
    delete normalizedurl_;
  }
  if (durl_ != &::google::protobuf::internal::kEmptyString) {
    delete durl_;
  }
  if (downloadtype_ != &::google::protobuf::internal::kEmptyString) {
    delete downloadtype_;
  }
  if (manualimporttag_ != &::google::protobuf::internal::kEmptyString) {
    delete manualimporttag_;
  }
  if (pagelanguage_ != &::google::protobuf::internal::kEmptyString) {
    delete pagelanguage_;
  }
  if (pagerank_ != &::google::protobuf::internal::kEmptyString) {
    delete pagerank_;
  }
  if (parentpagerank_ != &::google::protobuf::internal::kEmptyString) {
    delete parentpagerank_;
  }
  if (extends_ != &::google::protobuf::internal::kEmptyString) {
    delete extends_;
  }
  if (optype_ != &::google::protobuf::internal::kEmptyString) {
    delete optype_;
  }
  if (bestinnerlinkshrefpattern_ != &::google::protobuf::internal::kEmptyString) {
    delete bestinnerlinkshrefpattern_;
  }
  if (initparentpage_ != &::google::protobuf::internal::kEmptyString) {
    delete initparentpage_;
  }
  if (delreason_ != &::google::protobuf::internal::kEmptyString) {
    delete delreason_;
  }
  if (parentpagetype_ != &::google::protobuf::internal::kEmptyString) {
    delete parentpagetype_;
  }
  if (pagetype_ != &::google::protobuf::internal::kEmptyString) {
    delete pagetype_;
  }
  if (garbagetype_ != &::google::protobuf::internal::kEmptyString) {
    delete garbagetype_;
  }
  if (this != default_instance_) {
  }
}

void LinkBaseAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkBaseAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinkBaseAttr_descriptor_;
}

const LinkBaseAttr& LinkBaseAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_linkbase_2eproto();  return *default_instance_;
}

LinkBaseAttr* LinkBaseAttr::default_instance_ = NULL;

LinkBaseAttr* LinkBaseAttr::New() const {
  return new LinkBaseAttr;
}

void LinkBaseAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_anchor()) {
      if (anchor_ != &::google::protobuf::internal::kEmptyString) {
        anchor_->clear();
      }
    }
    depth_ = 0;
    foundtime_ = 0u;
    if (has_parentpage()) {
      if (parentpage_ != &::google::protobuf::internal::kEmptyString) {
        parentpage_->clear();
      }
    }
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    innerlinksnum_ = 0;
    asseedlevel_ = 0;
    pagepublishdate_ = 0u;
    linksnumafterbloomfilter_ = 0;
    if (has_normalizedurl()) {
      if (normalizedurl_ != &::google::protobuf::internal::kEmptyString) {
        normalizedurl_->clear();
      }
    }
    linksnumafterlinkfilter_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_durl()) {
      if (durl_ != &::google::protobuf::internal::kEmptyString) {
        durl_->clear();
      }
    }
    outerlinksnum_ = 0;
    browseuv_ = GOOGLE_LONGLONG(0);
    searchuv_ = GOOGLE_LONGLONG(0);
    isnewlink_ = false;
    if (has_downloadtype()) {
      if (downloadtype_ != &::google::protobuf::internal::kEmptyString) {
        downloadtype_->clear();
      }
    }
    if (has_manualimporttag()) {
      if (manualimporttag_ != &::google::protobuf::internal::kEmptyString) {
        manualimporttag_->clear();
      }
    }
    if (has_pagelanguage()) {
      if (pagelanguage_ != &::google::protobuf::internal::kEmptyString) {
        pagelanguage_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    parentbrowseuv_ = GOOGLE_LONGLONG(0);
    if (has_pagerank()) {
      if (pagerank_ != &::google::protobuf::internal::kEmptyString) {
        pagerank_->clear();
      }
    }
    if (has_parentpagerank()) {
      if (parentpagerank_ != &::google::protobuf::internal::kEmptyString) {
        parentpagerank_->clear();
      }
    }
    if (has_extends()) {
      if (extends_ != &::google::protobuf::internal::kEmptyString) {
        extends_->clear();
      }
    }
    pagesize_ = 0;
    if (has_optype()) {
      if (optype_ != &::google::protobuf::internal::kEmptyString) {
        optype_->clear();
      }
    }
    outeranchorlength_ = 0;
    scheduletime_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    errno_ = 0;
    if (has_bestinnerlinkshrefpattern()) {
      if (bestinnerlinkshrefpattern_ != &::google::protobuf::internal::kEmptyString) {
        bestinnerlinkshrefpattern_->clear();
      }
    }
    if (has_initparentpage()) {
      if (initparentpage_ != &::google::protobuf::internal::kEmptyString) {
        initparentpage_->clear();
      }
    }
    if (has_delreason()) {
      if (delreason_ != &::google::protobuf::internal::kEmptyString) {
        delreason_->clear();
      }
    }
    orglinknum_ = 0;
    browsepv_ = GOOGLE_LONGLONG(0);
    cndepth_ = 0;
    if (has_parentpagetype()) {
      if (parentpagetype_ != &::google::protobuf::internal::kEmptyString) {
        parentpagetype_->clear();
      }
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    parentdownloadtime_ = 0u;
    httpcode_ = 0;
    inneranchorlength_ = 0;
    latestfoundtime_ = 0u;
    linksnumafterqssfilter_ = 0;
    linksnumafternormalized_ = 0;
    downloadtime_ = 0u;
    contentsize_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    parentsearchuv_ = GOOGLE_LONGLONG(0);
    deltime_ = 0u;
    parentpagedepth_ = 0;
    if (has_pagetype()) {
      if (pagetype_ != &::google::protobuf::internal::kEmptyString) {
        pagetype_->clear();
      }
    }
    linksnumafterrobotsfilter_ = 0;
    deadpagetime_ = 0u;
    deadlinktime_ = 0u;
    offlinepagetype_ = 0;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    firstdownloadtime_ = 0u;
    fanyetype_ = 0;
    deadlinkadjustschedulepriority_ = 0;
    if (has_garbagetype()) {
      if (garbagetype_ != &::google::protobuf::internal::kEmptyString) {
        garbagetype_->clear();
      }
    }
    pagemodifydate_ = 0u;
    childnum_ = 0;
    goodchildnum_ = 0;
    goodparentstatnum_ = 0;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    isexpired_ = false;
    parentseedlevel_ = 0;
    forbid_ = 0;
    isinindex_ = false;
  }
  contentmd5_.Clear();
  etagmd5_.Clear();
  innerlinksmd5_.Clear();
  normalcrawlhis_.Clear();
  othercrawlhis_.Clear();
  hubcrawlhis_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LinkBaseAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string anchor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_anchor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->anchor().data(), this->anchor().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_contentMD5;
        break;
      }
      
      // repeated fixed64 contentMD5 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_contentMD5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_contentmd5())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_contentmd5())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_contentMD5;
        if (input->ExpectTag(24)) goto parse_depth;
        break;
      }
      
      // optional int32 depth = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_etagMD5;
        break;
      }
      
      // repeated fixed64 etagMD5 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_etagMD5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 33, input, this->mutable_etagmd5())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_etagmd5())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_etagMD5;
        if (input->ExpectTag(40)) goto parse_foundTime;
        break;
      }
      
      // optional uint32 foundTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_foundTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &foundtime_)));
          set_has_foundtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_parentPage;
        break;
      }
      
      // optional string parentPage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parentPage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parentpage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parentpage().data(), this->parentpage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_innerLinksMD5;
        break;
      }
      
      // repeated fixed64 innerLinksMD5 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_innerLinksMD5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 57, input, this->mutable_innerlinksmd5())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_innerlinksmd5())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_innerLinksMD5;
        if (input->ExpectTag(66)) goto parse_normalCrawlHis;
        break;
      }
      
      // repeated .LinkBase.LinkBaseAttr.CrawlHistory normalCrawlHis = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normalCrawlHis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_normalcrawlhis()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_normalCrawlHis;
        if (input->ExpectTag(74)) goto parse_otherCrawlHis;
        break;
      }
      
      // repeated .LinkBase.LinkBaseAttr.CrawlHistory otherCrawlHis = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otherCrawlHis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_othercrawlhis()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_otherCrawlHis;
        if (input->ExpectTag(82)) goto parse_hubCrawlHis;
        break;
      }
      
      // repeated .LinkBase.LinkBaseAttr.CrawlHistory hubCrawlHis = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hubCrawlHis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hubcrawlhis()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hubCrawlHis;
        if (input->ExpectTag(88)) goto parse_innerLinksNum;
        break;
      }
      
      // optional int32 innerLinksNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_innerLinksNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &innerlinksnum_)));
          set_has_innerlinksnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_asSeedLevel;
        break;
      }
      
      // optional int32 asSeedLevel = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_asSeedLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &asseedlevel_)));
          set_has_asseedlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_pagePublishDate;
        break;
      }
      
      // optional uint32 pagePublishDate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pagePublishDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pagepublishdate_)));
          set_has_pagepublishdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_linksNumAfterBloomFilter;
        break;
      }
      
      // optional int32 linksNumAfterBloomFilter = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_linksNumAfterBloomFilter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linksnumafterbloomfilter_)));
          set_has_linksnumafterbloomfilter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_normalizedUrl;
        break;
      }
      
      // optional string normalizedUrl = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normalizedUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normalizedurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->normalizedurl().data(), this->normalizedurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_linksNumAfterLinkFilter;
        break;
      }
      
      // optional int32 linksNumAfterLinkFilter = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_linksNumAfterLinkFilter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linksnumafterlinkfilter_)));
          set_has_linksnumafterlinkfilter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_durl;
        break;
      }
      
      // optional string durl = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_durl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_durl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->durl().data(), this->durl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_outerLinksNum;
        break;
      }
      
      // optional int32 outerLinksNum = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outerLinksNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outerlinksnum_)));
          set_has_outerlinksnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_browseUV;
        break;
      }
      
      // optional int64 browseUV = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_browseUV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &browseuv_)));
          set_has_browseuv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_searchUV;
        break;
      }
      
      // optional int64 searchUV = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_searchUV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &searchuv_)));
          set_has_searchuv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_isNewLink;
        break;
      }
      
      // optional bool isNewLink = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNewLink:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnewlink_)));
          set_has_isnewlink();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_downloadType;
        break;
      }
      
      // optional string downloadType = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_downloadType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_downloadtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->downloadtype().data(), this->downloadtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_manualImportTag;
        break;
      }
      
      // optional string manualImportTag = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manualImportTag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manualimporttag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->manualimporttag().data(), this->manualimporttag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_pageLanguage;
        break;
      }
      
      // optional string pageLanguage = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pageLanguage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pagelanguage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pagelanguage().data(), this->pagelanguage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_parentBrowseUV;
        break;
      }
      
      // optional int64 parentBrowseUV = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parentBrowseUV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parentbrowseuv_)));
          set_has_parentbrowseuv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_pageRank;
        break;
      }
      
      // optional string pageRank = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pageRank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pagerank()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pagerank().data(), this->pagerank().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_parentPageRank;
        break;
      }
      
      // optional string parentPageRank = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parentPageRank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parentpagerank()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parentpagerank().data(), this->parentpagerank().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_extends;
        break;
      }
      
      // optional string extends = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extends()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extends().data(), this->extends().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_pageSize;
        break;
      }
      
      // optional int32 pageSize = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pageSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pagesize_)));
          set_has_pagesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_opType;
        break;
      }
      
      // optional string opType = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_optype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->optype().data(), this->optype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_outerAnchorLength;
        break;
      }
      
      // optional int32 outerAnchorLength = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outerAnchorLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outeranchorlength_)));
          set_has_outeranchorlength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_scheduleTime;
        break;
      }
      
      // optional uint32 scheduleTime = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scheduleTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scheduletime_)));
          set_has_scheduletime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_errno;
        break;
      }
      
      // optional int32 errno = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errno_)));
          set_has_errno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_bestInnerLinksHrefPattern;
        break;
      }
      
      // optional string bestInnerLinksHrefPattern = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bestInnerLinksHrefPattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bestinnerlinkshrefpattern()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bestinnerlinkshrefpattern().data(), this->bestinnerlinkshrefpattern().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_initParentPage;
        break;
      }
      
      // optional string initParentPage = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_initParentPage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initparentpage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->initparentpage().data(), this->initparentpage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_delReason;
        break;
      }
      
      // optional string delReason = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delReason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_delreason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->delreason().data(), this->delreason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_orgLinkNum;
        break;
      }
      
      // optional int32 orgLinkNum = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orgLinkNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orglinknum_)));
          set_has_orglinknum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_browsePV;
        break;
      }
      
      // optional int64 browsePV = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_browsePV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &browsepv_)));
          set_has_browsepv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_cnDepth;
        break;
      }
      
      // optional int32 cnDepth = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cnDepth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cndepth_)));
          set_has_cndepth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_parentPageType;
        break;
      }
      
      // optional string parentPageType = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parentPageType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parentpagetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parentpagetype().data(), this->parentpagetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_parentDownloadTime;
        break;
      }
      
      // optional uint32 parentDownloadTime = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parentDownloadTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parentdownloadtime_)));
          set_has_parentdownloadtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_httpCode;
        break;
      }
      
      // optional sint32 httpCode = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_httpCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &httpcode_)));
          set_has_httpcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_innerAnchorLength;
        break;
      }
      
      // optional int32 innerAnchorLength = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_innerAnchorLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inneranchorlength_)));
          set_has_inneranchorlength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_latestFoundTime;
        break;
      }
      
      // optional uint32 latestFoundTime = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_latestFoundTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latestfoundtime_)));
          set_has_latestfoundtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_linksNumAfterQssFilter;
        break;
      }
      
      // optional int32 linksNumAfterQssFilter = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_linksNumAfterQssFilter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linksnumafterqssfilter_)));
          set_has_linksnumafterqssfilter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_linksNumAfterNormalized;
        break;
      }
      
      // optional int32 linksNumAfterNormalized = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_linksNumAfterNormalized:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linksnumafternormalized_)));
          set_has_linksnumafternormalized();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_downloadTime;
        break;
      }
      
      // optional uint32 downloadTime = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_downloadTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &downloadtime_)));
          set_has_downloadtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_contentSize;
        break;
      }
      
      // optional int32 contentSize = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contentSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contentsize_)));
          set_has_contentsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_parentSearchUV;
        break;
      }
      
      // optional int64 parentSearchUV = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parentSearchUV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parentsearchuv_)));
          set_has_parentsearchuv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_delTime;
        break;
      }
      
      // optional uint32 delTime = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deltime_)));
          set_has_deltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_parentPageDepth;
        break;
      }
      
      // optional int32 parentPageDepth = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parentPageDepth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parentpagedepth_)));
          set_has_parentpagedepth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_pageType;
        break;
      }
      
      // optional string pageType = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pageType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pagetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pagetype().data(), this->pagetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_linksNumAfterRobotsFilter;
        break;
      }
      
      // optional int32 linksNumAfterRobotsFilter = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_linksNumAfterRobotsFilter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linksnumafterrobotsfilter_)));
          set_has_linksnumafterrobotsfilter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_deadPageTime;
        break;
      }
      
      // optional uint32 deadPageTime = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deadPageTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deadpagetime_)));
          set_has_deadpagetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_deadLinkTime;
        break;
      }
      
      // optional uint32 deadLinkTime = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deadLinkTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deadlinktime_)));
          set_has_deadlinktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_offlinePageType;
        break;
      }
      
      // optional int32 offlinePageType = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offlinePageType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offlinepagetype_)));
          set_has_offlinepagetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_firstDownloadTime;
        break;
      }
      
      // optional uint32 firstDownloadTime = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firstDownloadTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firstdownloadtime_)));
          set_has_firstdownloadtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_fanyeType;
        break;
      }
      
      // optional int32 fanyeType = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fanyeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fanyetype_)));
          set_has_fanyetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_deadLinkAdjustSchedulePriority;
        break;
      }
      
      // optional int32 deadLinkAdjustSchedulePriority = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deadLinkAdjustSchedulePriority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deadlinkadjustschedulepriority_)));
          set_has_deadlinkadjustschedulepriority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_garbageType;
        break;
      }
      
      // optional string garbageType = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_garbageType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_garbagetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->garbagetype().data(), this->garbagetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_pageModifyDate;
        break;
      }
      
      // optional uint32 pageModifyDate = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pageModifyDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pagemodifydate_)));
          set_has_pagemodifydate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_childNum;
        break;
      }
      
      // optional int32 childNum = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_childNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &childnum_)));
          set_has_childnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_goodChildNum;
        break;
      }
      
      // optional int32 goodChildNum = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goodChildNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodchildnum_)));
          set_has_goodchildnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_goodParentStatNum;
        break;
      }
      
      // optional int32 goodParentStatNum = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goodParentStatNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodparentstatnum_)));
          set_has_goodparentstatnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_isExpired;
        break;
      }
      
      // optional bool isExpired = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isExpired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isexpired_)));
          set_has_isexpired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_parentSeedLevel;
        break;
      }
      
      // optional int32 parentSeedLevel = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parentSeedLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parentseedlevel_)));
          set_has_parentseedlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_forbid;
        break;
      }
      
      // optional int32 forbid = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forbid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forbid_)));
          set_has_forbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_isInIndex;
        break;
      }
      
      // optional bool isInIndex = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isInIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isinindex_)));
          set_has_isinindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LinkBaseAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string anchor = 1;
  if (has_anchor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->anchor().data(), this->anchor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->anchor(), output);
  }
  
  // repeated fixed64 contentMD5 = 2;
  for (int i = 0; i < this->contentmd5_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->contentmd5(i), output);
  }
  
  // optional int32 depth = 3;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->depth(), output);
  }
  
  // repeated fixed64 etagMD5 = 4;
  for (int i = 0; i < this->etagmd5_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      4, this->etagmd5(i), output);
  }
  
  // optional uint32 foundTime = 5;
  if (has_foundtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->foundtime(), output);
  }
  
  // optional string parentPage = 6;
  if (has_parentpage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentpage().data(), this->parentpage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->parentpage(), output);
  }
  
  // repeated fixed64 innerLinksMD5 = 7;
  for (int i = 0; i < this->innerlinksmd5_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      7, this->innerlinksmd5(i), output);
  }
  
  // repeated .LinkBase.LinkBaseAttr.CrawlHistory normalCrawlHis = 8;
  for (int i = 0; i < this->normalcrawlhis_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->normalcrawlhis(i), output);
  }
  
  // repeated .LinkBase.LinkBaseAttr.CrawlHistory otherCrawlHis = 9;
  for (int i = 0; i < this->othercrawlhis_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->othercrawlhis(i), output);
  }
  
  // repeated .LinkBase.LinkBaseAttr.CrawlHistory hubCrawlHis = 10;
  for (int i = 0; i < this->hubcrawlhis_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->hubcrawlhis(i), output);
  }
  
  // optional int32 innerLinksNum = 11;
  if (has_innerlinksnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->innerlinksnum(), output);
  }
  
  // optional int32 asSeedLevel = 12;
  if (has_asseedlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->asseedlevel(), output);
  }
  
  // optional uint32 pagePublishDate = 13;
  if (has_pagepublishdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->pagepublishdate(), output);
  }
  
  // optional int32 linksNumAfterBloomFilter = 14;
  if (has_linksnumafterbloomfilter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->linksnumafterbloomfilter(), output);
  }
  
  // optional string normalizedUrl = 15;
  if (has_normalizedurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->normalizedurl().data(), this->normalizedurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->normalizedurl(), output);
  }
  
  // optional int32 linksNumAfterLinkFilter = 16;
  if (has_linksnumafterlinkfilter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->linksnumafterlinkfilter(), output);
  }
  
  // optional string durl = 17;
  if (has_durl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->durl().data(), this->durl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->durl(), output);
  }
  
  // optional int32 outerLinksNum = 18;
  if (has_outerlinksnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->outerlinksnum(), output);
  }
  
  // optional int64 browseUV = 19;
  if (has_browseuv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->browseuv(), output);
  }
  
  // optional int64 searchUV = 20;
  if (has_searchuv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->searchuv(), output);
  }
  
  // optional bool isNewLink = 21;
  if (has_isnewlink()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->isnewlink(), output);
  }
  
  // optional string downloadType = 22;
  if (has_downloadtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->downloadtype().data(), this->downloadtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->downloadtype(), output);
  }
  
  // optional string manualImportTag = 23;
  if (has_manualimporttag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manualimporttag().data(), this->manualimporttag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->manualimporttag(), output);
  }
  
  // optional string pageLanguage = 24;
  if (has_pagelanguage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pagelanguage().data(), this->pagelanguage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->pagelanguage(), output);
  }
  
  // optional int64 parentBrowseUV = 25;
  if (has_parentbrowseuv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->parentbrowseuv(), output);
  }
  
  // optional string pageRank = 26;
  if (has_pagerank()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pagerank().data(), this->pagerank().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->pagerank(), output);
  }
  
  // optional string parentPageRank = 27;
  if (has_parentpagerank()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentpagerank().data(), this->parentpagerank().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->parentpagerank(), output);
  }
  
  // optional string extends = 28;
  if (has_extends()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extends().data(), this->extends().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->extends(), output);
  }
  
  // optional int32 pageSize = 29;
  if (has_pagesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->pagesize(), output);
  }
  
  // optional string opType = 30;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->optype().data(), this->optype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->optype(), output);
  }
  
  // optional int32 outerAnchorLength = 31;
  if (has_outeranchorlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->outeranchorlength(), output);
  }
  
  // optional uint32 scheduleTime = 32;
  if (has_scheduletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->scheduletime(), output);
  }
  
  // optional int32 errno = 33;
  if (has_errno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->errno(), output);
  }
  
  // optional string bestInnerLinksHrefPattern = 34;
  if (has_bestinnerlinkshrefpattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bestinnerlinkshrefpattern().data(), this->bestinnerlinkshrefpattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->bestinnerlinkshrefpattern(), output);
  }
  
  // optional string initParentPage = 35;
  if (has_initparentpage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->initparentpage().data(), this->initparentpage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      35, this->initparentpage(), output);
  }
  
  // optional string delReason = 36;
  if (has_delreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->delreason().data(), this->delreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      36, this->delreason(), output);
  }
  
  // optional int32 orgLinkNum = 37;
  if (has_orglinknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->orglinknum(), output);
  }
  
  // optional int64 browsePV = 38;
  if (has_browsepv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(38, this->browsepv(), output);
  }
  
  // optional int32 cnDepth = 39;
  if (has_cndepth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->cndepth(), output);
  }
  
  // optional string parentPageType = 40;
  if (has_parentpagetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentpagetype().data(), this->parentpagetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->parentpagetype(), output);
  }
  
  // optional uint32 parentDownloadTime = 41;
  if (has_parentdownloadtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->parentdownloadtime(), output);
  }
  
  // optional sint32 httpCode = 42;
  if (has_httpcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(42, this->httpcode(), output);
  }
  
  // optional int32 innerAnchorLength = 43;
  if (has_inneranchorlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->inneranchorlength(), output);
  }
  
  // optional uint32 latestFoundTime = 44;
  if (has_latestfoundtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->latestfoundtime(), output);
  }
  
  // optional int32 linksNumAfterQssFilter = 45;
  if (has_linksnumafterqssfilter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->linksnumafterqssfilter(), output);
  }
  
  // optional int32 linksNumAfterNormalized = 46;
  if (has_linksnumafternormalized()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->linksnumafternormalized(), output);
  }
  
  // optional uint32 downloadTime = 47;
  if (has_downloadtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->downloadtime(), output);
  }
  
  // optional int32 contentSize = 48;
  if (has_contentsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->contentsize(), output);
  }
  
  // optional int64 parentSearchUV = 49;
  if (has_parentsearchuv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(49, this->parentsearchuv(), output);
  }
  
  // optional uint32 delTime = 50;
  if (has_deltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->deltime(), output);
  }
  
  // optional int32 parentPageDepth = 51;
  if (has_parentpagedepth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->parentpagedepth(), output);
  }
  
  // optional string pageType = 52;
  if (has_pagetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pagetype().data(), this->pagetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      52, this->pagetype(), output);
  }
  
  // optional int32 linksNumAfterRobotsFilter = 53;
  if (has_linksnumafterrobotsfilter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->linksnumafterrobotsfilter(), output);
  }
  
  // optional uint32 deadPageTime = 54;
  if (has_deadpagetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->deadpagetime(), output);
  }
  
  // optional uint32 deadLinkTime = 55;
  if (has_deadlinktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->deadlinktime(), output);
  }
  
  // optional int32 offlinePageType = 56;
  if (has_offlinepagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->offlinepagetype(), output);
  }
  
  // optional uint32 firstDownloadTime = 57;
  if (has_firstdownloadtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(57, this->firstdownloadtime(), output);
  }
  
  // optional int32 fanyeType = 58;
  if (has_fanyetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->fanyetype(), output);
  }
  
  // optional int32 deadLinkAdjustSchedulePriority = 59;
  if (has_deadlinkadjustschedulepriority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(59, this->deadlinkadjustschedulepriority(), output);
  }
  
  // optional string garbageType = 60;
  if (has_garbagetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->garbagetype().data(), this->garbagetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      60, this->garbagetype(), output);
  }
  
  // optional uint32 pageModifyDate = 61;
  if (has_pagemodifydate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->pagemodifydate(), output);
  }
  
  // optional int32 childNum = 62;
  if (has_childnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->childnum(), output);
  }
  
  // optional int32 goodChildNum = 63;
  if (has_goodchildnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->goodchildnum(), output);
  }
  
  // optional int32 goodParentStatNum = 64;
  if (has_goodparentstatnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->goodparentstatnum(), output);
  }
  
  // optional bool isExpired = 65;
  if (has_isexpired()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->isexpired(), output);
  }
  
  // optional int32 parentSeedLevel = 66;
  if (has_parentseedlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(66, this->parentseedlevel(), output);
  }
  
  // optional int32 forbid = 67;
  if (has_forbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->forbid(), output);
  }
  
  // optional bool isInIndex = 68;
  if (has_isinindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(68, this->isinindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LinkBaseAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string anchor = 1;
  if (has_anchor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->anchor().data(), this->anchor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->anchor(), target);
  }
  
  // repeated fixed64 contentMD5 = 2;
  for (int i = 0; i < this->contentmd5_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->contentmd5(i), target);
  }
  
  // optional int32 depth = 3;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->depth(), target);
  }
  
  // repeated fixed64 etagMD5 = 4;
  for (int i = 0; i < this->etagmd5_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(4, this->etagmd5(i), target);
  }
  
  // optional uint32 foundTime = 5;
  if (has_foundtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->foundtime(), target);
  }
  
  // optional string parentPage = 6;
  if (has_parentpage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentpage().data(), this->parentpage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->parentpage(), target);
  }
  
  // repeated fixed64 innerLinksMD5 = 7;
  for (int i = 0; i < this->innerlinksmd5_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(7, this->innerlinksmd5(i), target);
  }
  
  // repeated .LinkBase.LinkBaseAttr.CrawlHistory normalCrawlHis = 8;
  for (int i = 0; i < this->normalcrawlhis_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->normalcrawlhis(i), target);
  }
  
  // repeated .LinkBase.LinkBaseAttr.CrawlHistory otherCrawlHis = 9;
  for (int i = 0; i < this->othercrawlhis_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->othercrawlhis(i), target);
  }
  
  // repeated .LinkBase.LinkBaseAttr.CrawlHistory hubCrawlHis = 10;
  for (int i = 0; i < this->hubcrawlhis_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->hubcrawlhis(i), target);
  }
  
  // optional int32 innerLinksNum = 11;
  if (has_innerlinksnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->innerlinksnum(), target);
  }
  
  // optional int32 asSeedLevel = 12;
  if (has_asseedlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->asseedlevel(), target);
  }
  
  // optional uint32 pagePublishDate = 13;
  if (has_pagepublishdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->pagepublishdate(), target);
  }
  
  // optional int32 linksNumAfterBloomFilter = 14;
  if (has_linksnumafterbloomfilter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->linksnumafterbloomfilter(), target);
  }
  
  // optional string normalizedUrl = 15;
  if (has_normalizedurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->normalizedurl().data(), this->normalizedurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->normalizedurl(), target);
  }
  
  // optional int32 linksNumAfterLinkFilter = 16;
  if (has_linksnumafterlinkfilter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->linksnumafterlinkfilter(), target);
  }
  
  // optional string durl = 17;
  if (has_durl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->durl().data(), this->durl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->durl(), target);
  }
  
  // optional int32 outerLinksNum = 18;
  if (has_outerlinksnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->outerlinksnum(), target);
  }
  
  // optional int64 browseUV = 19;
  if (has_browseuv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->browseuv(), target);
  }
  
  // optional int64 searchUV = 20;
  if (has_searchuv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->searchuv(), target);
  }
  
  // optional bool isNewLink = 21;
  if (has_isnewlink()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->isnewlink(), target);
  }
  
  // optional string downloadType = 22;
  if (has_downloadtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->downloadtype().data(), this->downloadtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->downloadtype(), target);
  }
  
  // optional string manualImportTag = 23;
  if (has_manualimporttag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manualimporttag().data(), this->manualimporttag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->manualimporttag(), target);
  }
  
  // optional string pageLanguage = 24;
  if (has_pagelanguage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pagelanguage().data(), this->pagelanguage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->pagelanguage(), target);
  }
  
  // optional int64 parentBrowseUV = 25;
  if (has_parentbrowseuv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->parentbrowseuv(), target);
  }
  
  // optional string pageRank = 26;
  if (has_pagerank()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pagerank().data(), this->pagerank().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->pagerank(), target);
  }
  
  // optional string parentPageRank = 27;
  if (has_parentpagerank()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentpagerank().data(), this->parentpagerank().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->parentpagerank(), target);
  }
  
  // optional string extends = 28;
  if (has_extends()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extends().data(), this->extends().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->extends(), target);
  }
  
  // optional int32 pageSize = 29;
  if (has_pagesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->pagesize(), target);
  }
  
  // optional string opType = 30;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->optype().data(), this->optype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->optype(), target);
  }
  
  // optional int32 outerAnchorLength = 31;
  if (has_outeranchorlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->outeranchorlength(), target);
  }
  
  // optional uint32 scheduleTime = 32;
  if (has_scheduletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->scheduletime(), target);
  }
  
  // optional int32 errno = 33;
  if (has_errno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->errno(), target);
  }
  
  // optional string bestInnerLinksHrefPattern = 34;
  if (has_bestinnerlinkshrefpattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bestinnerlinkshrefpattern().data(), this->bestinnerlinkshrefpattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->bestinnerlinkshrefpattern(), target);
  }
  
  // optional string initParentPage = 35;
  if (has_initparentpage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->initparentpage().data(), this->initparentpage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->initparentpage(), target);
  }
  
  // optional string delReason = 36;
  if (has_delreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->delreason().data(), this->delreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->delreason(), target);
  }
  
  // optional int32 orgLinkNum = 37;
  if (has_orglinknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->orglinknum(), target);
  }
  
  // optional int64 browsePV = 38;
  if (has_browsepv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(38, this->browsepv(), target);
  }
  
  // optional int32 cnDepth = 39;
  if (has_cndepth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->cndepth(), target);
  }
  
  // optional string parentPageType = 40;
  if (has_parentpagetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentpagetype().data(), this->parentpagetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->parentpagetype(), target);
  }
  
  // optional uint32 parentDownloadTime = 41;
  if (has_parentdownloadtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->parentdownloadtime(), target);
  }
  
  // optional sint32 httpCode = 42;
  if (has_httpcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(42, this->httpcode(), target);
  }
  
  // optional int32 innerAnchorLength = 43;
  if (has_inneranchorlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->inneranchorlength(), target);
  }
  
  // optional uint32 latestFoundTime = 44;
  if (has_latestfoundtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->latestfoundtime(), target);
  }
  
  // optional int32 linksNumAfterQssFilter = 45;
  if (has_linksnumafterqssfilter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->linksnumafterqssfilter(), target);
  }
  
  // optional int32 linksNumAfterNormalized = 46;
  if (has_linksnumafternormalized()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->linksnumafternormalized(), target);
  }
  
  // optional uint32 downloadTime = 47;
  if (has_downloadtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->downloadtime(), target);
  }
  
  // optional int32 contentSize = 48;
  if (has_contentsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->contentsize(), target);
  }
  
  // optional int64 parentSearchUV = 49;
  if (has_parentsearchuv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(49, this->parentsearchuv(), target);
  }
  
  // optional uint32 delTime = 50;
  if (has_deltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->deltime(), target);
  }
  
  // optional int32 parentPageDepth = 51;
  if (has_parentpagedepth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->parentpagedepth(), target);
  }
  
  // optional string pageType = 52;
  if (has_pagetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pagetype().data(), this->pagetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        52, this->pagetype(), target);
  }
  
  // optional int32 linksNumAfterRobotsFilter = 53;
  if (has_linksnumafterrobotsfilter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->linksnumafterrobotsfilter(), target);
  }
  
  // optional uint32 deadPageTime = 54;
  if (has_deadpagetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->deadpagetime(), target);
  }
  
  // optional uint32 deadLinkTime = 55;
  if (has_deadlinktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(55, this->deadlinktime(), target);
  }
  
  // optional int32 offlinePageType = 56;
  if (has_offlinepagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->offlinepagetype(), target);
  }
  
  // optional uint32 firstDownloadTime = 57;
  if (has_firstdownloadtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(57, this->firstdownloadtime(), target);
  }
  
  // optional int32 fanyeType = 58;
  if (has_fanyetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->fanyetype(), target);
  }
  
  // optional int32 deadLinkAdjustSchedulePriority = 59;
  if (has_deadlinkadjustschedulepriority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(59, this->deadlinkadjustschedulepriority(), target);
  }
  
  // optional string garbageType = 60;
  if (has_garbagetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->garbagetype().data(), this->garbagetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        60, this->garbagetype(), target);
  }
  
  // optional uint32 pageModifyDate = 61;
  if (has_pagemodifydate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->pagemodifydate(), target);
  }
  
  // optional int32 childNum = 62;
  if (has_childnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->childnum(), target);
  }
  
  // optional int32 goodChildNum = 63;
  if (has_goodchildnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->goodchildnum(), target);
  }
  
  // optional int32 goodParentStatNum = 64;
  if (has_goodparentstatnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->goodparentstatnum(), target);
  }
  
  // optional bool isExpired = 65;
  if (has_isexpired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(65, this->isexpired(), target);
  }
  
  // optional int32 parentSeedLevel = 66;
  if (has_parentseedlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(66, this->parentseedlevel(), target);
  }
  
  // optional int32 forbid = 67;
  if (has_forbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->forbid(), target);
  }
  
  // optional bool isInIndex = 68;
  if (has_isinindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(68, this->isinindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LinkBaseAttr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string anchor = 1;
    if (has_anchor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->anchor());
    }
    
    // optional int32 depth = 3;
    if (has_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depth());
    }
    
    // optional uint32 foundTime = 5;
    if (has_foundtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->foundtime());
    }
    
    // optional string parentPage = 6;
    if (has_parentpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parentpage());
    }
    
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional int32 innerLinksNum = 11;
    if (has_innerlinksnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->innerlinksnum());
    }
    
    // optional int32 asSeedLevel = 12;
    if (has_asseedlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->asseedlevel());
    }
    
    // optional uint32 pagePublishDate = 13;
    if (has_pagepublishdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pagepublishdate());
    }
    
    // optional int32 linksNumAfterBloomFilter = 14;
    if (has_linksnumafterbloomfilter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linksnumafterbloomfilter());
    }
    
    // optional string normalizedUrl = 15;
    if (has_normalizedurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->normalizedurl());
    }
    
    // optional int32 linksNumAfterLinkFilter = 16;
    if (has_linksnumafterlinkfilter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linksnumafterlinkfilter());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string durl = 17;
    if (has_durl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->durl());
    }
    
    // optional int32 outerLinksNum = 18;
    if (has_outerlinksnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outerlinksnum());
    }
    
    // optional int64 browseUV = 19;
    if (has_browseuv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->browseuv());
    }
    
    // optional int64 searchUV = 20;
    if (has_searchuv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->searchuv());
    }
    
    // optional bool isNewLink = 21;
    if (has_isnewlink()) {
      total_size += 2 + 1;
    }
    
    // optional string downloadType = 22;
    if (has_downloadtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->downloadtype());
    }
    
    // optional string manualImportTag = 23;
    if (has_manualimporttag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manualimporttag());
    }
    
    // optional string pageLanguage = 24;
    if (has_pagelanguage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pagelanguage());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int64 parentBrowseUV = 25;
    if (has_parentbrowseuv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->parentbrowseuv());
    }
    
    // optional string pageRank = 26;
    if (has_pagerank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pagerank());
    }
    
    // optional string parentPageRank = 27;
    if (has_parentpagerank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parentpagerank());
    }
    
    // optional string extends = 28;
    if (has_extends()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extends());
    }
    
    // optional int32 pageSize = 29;
    if (has_pagesize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pagesize());
    }
    
    // optional string opType = 30;
    if (has_optype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->optype());
    }
    
    // optional int32 outerAnchorLength = 31;
    if (has_outeranchorlength()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outeranchorlength());
    }
    
    // optional uint32 scheduleTime = 32;
    if (has_scheduletime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scheduletime());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 errno = 33;
    if (has_errno()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errno());
    }
    
    // optional string bestInnerLinksHrefPattern = 34;
    if (has_bestinnerlinkshrefpattern()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bestinnerlinkshrefpattern());
    }
    
    // optional string initParentPage = 35;
    if (has_initparentpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initparentpage());
    }
    
    // optional string delReason = 36;
    if (has_delreason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->delreason());
    }
    
    // optional int32 orgLinkNum = 37;
    if (has_orglinknum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orglinknum());
    }
    
    // optional int64 browsePV = 38;
    if (has_browsepv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->browsepv());
    }
    
    // optional int32 cnDepth = 39;
    if (has_cndepth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cndepth());
    }
    
    // optional string parentPageType = 40;
    if (has_parentpagetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parentpagetype());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 parentDownloadTime = 41;
    if (has_parentdownloadtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parentdownloadtime());
    }
    
    // optional sint32 httpCode = 42;
    if (has_httpcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->httpcode());
    }
    
    // optional int32 innerAnchorLength = 43;
    if (has_inneranchorlength()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inneranchorlength());
    }
    
    // optional uint32 latestFoundTime = 44;
    if (has_latestfoundtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->latestfoundtime());
    }
    
    // optional int32 linksNumAfterQssFilter = 45;
    if (has_linksnumafterqssfilter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linksnumafterqssfilter());
    }
    
    // optional int32 linksNumAfterNormalized = 46;
    if (has_linksnumafternormalized()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linksnumafternormalized());
    }
    
    // optional uint32 downloadTime = 47;
    if (has_downloadtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->downloadtime());
    }
    
    // optional int32 contentSize = 48;
    if (has_contentsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contentsize());
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int64 parentSearchUV = 49;
    if (has_parentsearchuv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->parentsearchuv());
    }
    
    // optional uint32 delTime = 50;
    if (has_deltime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deltime());
    }
    
    // optional int32 parentPageDepth = 51;
    if (has_parentpagedepth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parentpagedepth());
    }
    
    // optional string pageType = 52;
    if (has_pagetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pagetype());
    }
    
    // optional int32 linksNumAfterRobotsFilter = 53;
    if (has_linksnumafterrobotsfilter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linksnumafterrobotsfilter());
    }
    
    // optional uint32 deadPageTime = 54;
    if (has_deadpagetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deadpagetime());
    }
    
    // optional uint32 deadLinkTime = 55;
    if (has_deadlinktime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deadlinktime());
    }
    
    // optional int32 offlinePageType = 56;
    if (has_offlinepagetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offlinepagetype());
    }
    
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional uint32 firstDownloadTime = 57;
    if (has_firstdownloadtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->firstdownloadtime());
    }
    
    // optional int32 fanyeType = 58;
    if (has_fanyetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fanyetype());
    }
    
    // optional int32 deadLinkAdjustSchedulePriority = 59;
    if (has_deadlinkadjustschedulepriority()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deadlinkadjustschedulepriority());
    }
    
    // optional string garbageType = 60;
    if (has_garbagetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->garbagetype());
    }
    
    // optional uint32 pageModifyDate = 61;
    if (has_pagemodifydate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pagemodifydate());
    }
    
    // optional int32 childNum = 62;
    if (has_childnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->childnum());
    }
    
    // optional int32 goodChildNum = 63;
    if (has_goodchildnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodchildnum());
    }
    
    // optional int32 goodParentStatNum = 64;
    if (has_goodparentstatnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodparentstatnum());
    }
    
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional bool isExpired = 65;
    if (has_isexpired()) {
      total_size += 2 + 1;
    }
    
    // optional int32 parentSeedLevel = 66;
    if (has_parentseedlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parentseedlevel());
    }
    
    // optional int32 forbid = 67;
    if (has_forbid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->forbid());
    }
    
    // optional bool isInIndex = 68;
    if (has_isinindex()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated fixed64 contentMD5 = 2;
  {
    int data_size = 0;
    data_size = 8 * this->contentmd5_size();
    total_size += 1 * this->contentmd5_size() + data_size;
  }
  
  // repeated fixed64 etagMD5 = 4;
  {
    int data_size = 0;
    data_size = 8 * this->etagmd5_size();
    total_size += 1 * this->etagmd5_size() + data_size;
  }
  
  // repeated fixed64 innerLinksMD5 = 7;
  {
    int data_size = 0;
    data_size = 8 * this->innerlinksmd5_size();
    total_size += 1 * this->innerlinksmd5_size() + data_size;
  }
  
  // repeated .LinkBase.LinkBaseAttr.CrawlHistory normalCrawlHis = 8;
  total_size += 1 * this->normalcrawlhis_size();
  for (int i = 0; i < this->normalcrawlhis_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->normalcrawlhis(i));
  }
  
  // repeated .LinkBase.LinkBaseAttr.CrawlHistory otherCrawlHis = 9;
  total_size += 1 * this->othercrawlhis_size();
  for (int i = 0; i < this->othercrawlhis_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->othercrawlhis(i));
  }
  
  // repeated .LinkBase.LinkBaseAttr.CrawlHistory hubCrawlHis = 10;
  total_size += 1 * this->hubcrawlhis_size();
  for (int i = 0; i < this->hubcrawlhis_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hubcrawlhis(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkBaseAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LinkBaseAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LinkBaseAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LinkBaseAttr::MergeFrom(const LinkBaseAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  contentmd5_.MergeFrom(from.contentmd5_);
  etagmd5_.MergeFrom(from.etagmd5_);
  innerlinksmd5_.MergeFrom(from.innerlinksmd5_);
  normalcrawlhis_.MergeFrom(from.normalcrawlhis_);
  othercrawlhis_.MergeFrom(from.othercrawlhis_);
  hubcrawlhis_.MergeFrom(from.hubcrawlhis_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_anchor()) {
      set_anchor(from.anchor());
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
    if (from.has_foundtime()) {
      set_foundtime(from.foundtime());
    }
    if (from.has_parentpage()) {
      set_parentpage(from.parentpage());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_innerlinksnum()) {
      set_innerlinksnum(from.innerlinksnum());
    }
    if (from.has_asseedlevel()) {
      set_asseedlevel(from.asseedlevel());
    }
    if (from.has_pagepublishdate()) {
      set_pagepublishdate(from.pagepublishdate());
    }
    if (from.has_linksnumafterbloomfilter()) {
      set_linksnumafterbloomfilter(from.linksnumafterbloomfilter());
    }
    if (from.has_normalizedurl()) {
      set_normalizedurl(from.normalizedurl());
    }
    if (from.has_linksnumafterlinkfilter()) {
      set_linksnumafterlinkfilter(from.linksnumafterlinkfilter());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_durl()) {
      set_durl(from.durl());
    }
    if (from.has_outerlinksnum()) {
      set_outerlinksnum(from.outerlinksnum());
    }
    if (from.has_browseuv()) {
      set_browseuv(from.browseuv());
    }
    if (from.has_searchuv()) {
      set_searchuv(from.searchuv());
    }
    if (from.has_isnewlink()) {
      set_isnewlink(from.isnewlink());
    }
    if (from.has_downloadtype()) {
      set_downloadtype(from.downloadtype());
    }
    if (from.has_manualimporttag()) {
      set_manualimporttag(from.manualimporttag());
    }
    if (from.has_pagelanguage()) {
      set_pagelanguage(from.pagelanguage());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_parentbrowseuv()) {
      set_parentbrowseuv(from.parentbrowseuv());
    }
    if (from.has_pagerank()) {
      set_pagerank(from.pagerank());
    }
    if (from.has_parentpagerank()) {
      set_parentpagerank(from.parentpagerank());
    }
    if (from.has_extends()) {
      set_extends(from.extends());
    }
    if (from.has_pagesize()) {
      set_pagesize(from.pagesize());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_outeranchorlength()) {
      set_outeranchorlength(from.outeranchorlength());
    }
    if (from.has_scheduletime()) {
      set_scheduletime(from.scheduletime());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_errno()) {
      set_errno(from.errno());
    }
    if (from.has_bestinnerlinkshrefpattern()) {
      set_bestinnerlinkshrefpattern(from.bestinnerlinkshrefpattern());
    }
    if (from.has_initparentpage()) {
      set_initparentpage(from.initparentpage());
    }
    if (from.has_delreason()) {
      set_delreason(from.delreason());
    }
    if (from.has_orglinknum()) {
      set_orglinknum(from.orglinknum());
    }
    if (from.has_browsepv()) {
      set_browsepv(from.browsepv());
    }
    if (from.has_cndepth()) {
      set_cndepth(from.cndepth());
    }
    if (from.has_parentpagetype()) {
      set_parentpagetype(from.parentpagetype());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_parentdownloadtime()) {
      set_parentdownloadtime(from.parentdownloadtime());
    }
    if (from.has_httpcode()) {
      set_httpcode(from.httpcode());
    }
    if (from.has_inneranchorlength()) {
      set_inneranchorlength(from.inneranchorlength());
    }
    if (from.has_latestfoundtime()) {
      set_latestfoundtime(from.latestfoundtime());
    }
    if (from.has_linksnumafterqssfilter()) {
      set_linksnumafterqssfilter(from.linksnumafterqssfilter());
    }
    if (from.has_linksnumafternormalized()) {
      set_linksnumafternormalized(from.linksnumafternormalized());
    }
    if (from.has_downloadtime()) {
      set_downloadtime(from.downloadtime());
    }
    if (from.has_contentsize()) {
      set_contentsize(from.contentsize());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_parentsearchuv()) {
      set_parentsearchuv(from.parentsearchuv());
    }
    if (from.has_deltime()) {
      set_deltime(from.deltime());
    }
    if (from.has_parentpagedepth()) {
      set_parentpagedepth(from.parentpagedepth());
    }
    if (from.has_pagetype()) {
      set_pagetype(from.pagetype());
    }
    if (from.has_linksnumafterrobotsfilter()) {
      set_linksnumafterrobotsfilter(from.linksnumafterrobotsfilter());
    }
    if (from.has_deadpagetime()) {
      set_deadpagetime(from.deadpagetime());
    }
    if (from.has_deadlinktime()) {
      set_deadlinktime(from.deadlinktime());
    }
    if (from.has_offlinepagetype()) {
      set_offlinepagetype(from.offlinepagetype());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_firstdownloadtime()) {
      set_firstdownloadtime(from.firstdownloadtime());
    }
    if (from.has_fanyetype()) {
      set_fanyetype(from.fanyetype());
    }
    if (from.has_deadlinkadjustschedulepriority()) {
      set_deadlinkadjustschedulepriority(from.deadlinkadjustschedulepriority());
    }
    if (from.has_garbagetype()) {
      set_garbagetype(from.garbagetype());
    }
    if (from.has_pagemodifydate()) {
      set_pagemodifydate(from.pagemodifydate());
    }
    if (from.has_childnum()) {
      set_childnum(from.childnum());
    }
    if (from.has_goodchildnum()) {
      set_goodchildnum(from.goodchildnum());
    }
    if (from.has_goodparentstatnum()) {
      set_goodparentstatnum(from.goodparentstatnum());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_isexpired()) {
      set_isexpired(from.isexpired());
    }
    if (from.has_parentseedlevel()) {
      set_parentseedlevel(from.parentseedlevel());
    }
    if (from.has_forbid()) {
      set_forbid(from.forbid());
    }
    if (from.has_isinindex()) {
      set_isinindex(from.isinindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LinkBaseAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkBaseAttr::CopyFrom(const LinkBaseAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkBaseAttr::IsInitialized() const {
  
  return true;
}

void LinkBaseAttr::Swap(LinkBaseAttr* other) {
  if (other != this) {
    std::swap(anchor_, other->anchor_);
    contentmd5_.Swap(&other->contentmd5_);
    std::swap(depth_, other->depth_);
    etagmd5_.Swap(&other->etagmd5_);
    std::swap(foundtime_, other->foundtime_);
    std::swap(parentpage_, other->parentpage_);
    innerlinksmd5_.Swap(&other->innerlinksmd5_);
    normalcrawlhis_.Swap(&other->normalcrawlhis_);
    othercrawlhis_.Swap(&other->othercrawlhis_);
    hubcrawlhis_.Swap(&other->hubcrawlhis_);
    std::swap(innerlinksnum_, other->innerlinksnum_);
    std::swap(asseedlevel_, other->asseedlevel_);
    std::swap(pagepublishdate_, other->pagepublishdate_);
    std::swap(linksnumafterbloomfilter_, other->linksnumafterbloomfilter_);
    std::swap(normalizedurl_, other->normalizedurl_);
    std::swap(linksnumafterlinkfilter_, other->linksnumafterlinkfilter_);
    std::swap(durl_, other->durl_);
    std::swap(outerlinksnum_, other->outerlinksnum_);
    std::swap(browseuv_, other->browseuv_);
    std::swap(searchuv_, other->searchuv_);
    std::swap(isnewlink_, other->isnewlink_);
    std::swap(downloadtype_, other->downloadtype_);
    std::swap(manualimporttag_, other->manualimporttag_);
    std::swap(pagelanguage_, other->pagelanguage_);
    std::swap(parentbrowseuv_, other->parentbrowseuv_);
    std::swap(pagerank_, other->pagerank_);
    std::swap(parentpagerank_, other->parentpagerank_);
    std::swap(extends_, other->extends_);
    std::swap(pagesize_, other->pagesize_);
    std::swap(optype_, other->optype_);
    std::swap(outeranchorlength_, other->outeranchorlength_);
    std::swap(scheduletime_, other->scheduletime_);
    std::swap(errno_, other->errno_);
    std::swap(bestinnerlinkshrefpattern_, other->bestinnerlinkshrefpattern_);
    std::swap(initparentpage_, other->initparentpage_);
    std::swap(delreason_, other->delreason_);
    std::swap(orglinknum_, other->orglinknum_);
    std::swap(browsepv_, other->browsepv_);
    std::swap(cndepth_, other->cndepth_);
    std::swap(parentpagetype_, other->parentpagetype_);
    std::swap(parentdownloadtime_, other->parentdownloadtime_);
    std::swap(httpcode_, other->httpcode_);
    std::swap(inneranchorlength_, other->inneranchorlength_);
    std::swap(latestfoundtime_, other->latestfoundtime_);
    std::swap(linksnumafterqssfilter_, other->linksnumafterqssfilter_);
    std::swap(linksnumafternormalized_, other->linksnumafternormalized_);
    std::swap(downloadtime_, other->downloadtime_);
    std::swap(contentsize_, other->contentsize_);
    std::swap(parentsearchuv_, other->parentsearchuv_);
    std::swap(deltime_, other->deltime_);
    std::swap(parentpagedepth_, other->parentpagedepth_);
    std::swap(pagetype_, other->pagetype_);
    std::swap(linksnumafterrobotsfilter_, other->linksnumafterrobotsfilter_);
    std::swap(deadpagetime_, other->deadpagetime_);
    std::swap(deadlinktime_, other->deadlinktime_);
    std::swap(offlinepagetype_, other->offlinepagetype_);
    std::swap(firstdownloadtime_, other->firstdownloadtime_);
    std::swap(fanyetype_, other->fanyetype_);
    std::swap(deadlinkadjustschedulepriority_, other->deadlinkadjustschedulepriority_);
    std::swap(garbagetype_, other->garbagetype_);
    std::swap(pagemodifydate_, other->pagemodifydate_);
    std::swap(childnum_, other->childnum_);
    std::swap(goodchildnum_, other->goodchildnum_);
    std::swap(goodparentstatnum_, other->goodparentstatnum_);
    std::swap(isexpired_, other->isexpired_);
    std::swap(parentseedlevel_, other->parentseedlevel_);
    std::swap(forbid_, other->forbid_);
    std::swap(isinindex_, other->isinindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LinkBaseAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinkBaseAttr_descriptor_;
  metadata.reflection = LinkBaseAttr_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace LinkBase

// @@protoc_insertion_point(global_scope)
