// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: linkbase.proto

#ifndef PROTOBUF_linkbase_2eproto__INCLUDED
#define PROTOBUF_linkbase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace LinkBase {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_linkbase_2eproto();
void protobuf_AssignDesc_linkbase_2eproto();
void protobuf_ShutdownFile_linkbase_2eproto();

class LinkBaseAttr;
class LinkBaseAttr_CrawlHistory;

// ===================================================================

class LinkBaseAttr_CrawlHistory : public ::google::protobuf::Message {
 public:
  LinkBaseAttr_CrawlHistory();
  virtual ~LinkBaseAttr_CrawlHistory();
  
  LinkBaseAttr_CrawlHistory(const LinkBaseAttr_CrawlHistory& from);
  
  inline LinkBaseAttr_CrawlHistory& operator=(const LinkBaseAttr_CrawlHistory& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkBaseAttr_CrawlHistory& default_instance();
  
  void Swap(LinkBaseAttr_CrawlHistory* other);
  
  // implements Message ----------------------------------------------
  
  LinkBaseAttr_CrawlHistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LinkBaseAttr_CrawlHistory& from);
  void MergeFrom(const LinkBaseAttr_CrawlHistory& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 downloadTime = 1;
  inline bool has_downloadtime() const;
  inline void clear_downloadtime();
  static const int kDownloadTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 downloadtime() const;
  inline void set_downloadtime(::google::protobuf::uint32 value);
  
  // optional sint32 httpCode = 2;
  inline bool has_httpcode() const;
  inline void clear_httpcode();
  static const int kHttpCodeFieldNumber = 2;
  inline ::google::protobuf::int32 httpcode() const;
  inline void set_httpcode(::google::protobuf::int32 value);
  
  // repeated fixed64 contentMD5 = 3;
  inline int contentmd5_size() const;
  inline void clear_contentmd5();
  static const int kContentMD5FieldNumber = 3;
  inline ::google::protobuf::uint64 contentmd5(int index) const;
  inline void set_contentmd5(int index, ::google::protobuf::uint64 value);
  inline void add_contentmd5(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      contentmd5() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_contentmd5();
  
  // repeated fixed64 innerLinksMD5 = 4;
  inline int innerlinksmd5_size() const;
  inline void clear_innerlinksmd5();
  static const int kInnerLinksMD5FieldNumber = 4;
  inline ::google::protobuf::uint64 innerlinksmd5(int index) const;
  inline void set_innerlinksmd5(int index, ::google::protobuf::uint64 value);
  inline void add_innerlinksmd5(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      innerlinksmd5() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_innerlinksmd5();
  
  // optional int32 contentSize = 5;
  inline bool has_contentsize() const;
  inline void clear_contentsize();
  static const int kContentSizeFieldNumber = 5;
  inline ::google::protobuf::int32 contentsize() const;
  inline void set_contentsize(::google::protobuf::int32 value);
  
  // optional int32 innerLinksNum = 6;
  inline bool has_innerlinksnum() const;
  inline void clear_innerlinksnum();
  static const int kInnerLinksNumFieldNumber = 6;
  inline ::google::protobuf::int32 innerlinksnum() const;
  inline void set_innerlinksnum(::google::protobuf::int32 value);
  
  // optional int32 innerAnchorLength = 7;
  inline bool has_inneranchorlength() const;
  inline void clear_inneranchorlength();
  static const int kInnerAnchorLengthFieldNumber = 7;
  inline ::google::protobuf::int32 inneranchorlength() const;
  inline void set_inneranchorlength(::google::protobuf::int32 value);
  
  // optional int32 outerLinksNum = 8;
  inline bool has_outerlinksnum() const;
  inline void clear_outerlinksnum();
  static const int kOuterLinksNumFieldNumber = 8;
  inline ::google::protobuf::int32 outerlinksnum() const;
  inline void set_outerlinksnum(::google::protobuf::int32 value);
  
  // optional int32 outerAnchorLength = 9;
  inline bool has_outeranchorlength() const;
  inline void clear_outeranchorlength();
  static const int kOuterAnchorLengthFieldNumber = 9;
  inline ::google::protobuf::int32 outeranchorlength() const;
  inline void set_outeranchorlength(::google::protobuf::int32 value);
  
  // repeated fixed64 etagMD5 = 10;
  inline int etagmd5_size() const;
  inline void clear_etagmd5();
  static const int kEtagMD5FieldNumber = 10;
  inline ::google::protobuf::uint64 etagmd5(int index) const;
  inline void set_etagmd5(int index, ::google::protobuf::uint64 value);
  inline void add_etagmd5(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      etagmd5() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_etagmd5();
  
  // optional int32 newChildLinksNumForSelf = 11;
  inline bool has_newchildlinksnumforself() const;
  inline void clear_newchildlinksnumforself();
  static const int kNewChildLinksNumForSelfFieldNumber = 11;
  inline ::google::protobuf::int32 newchildlinksnumforself() const;
  inline void set_newchildlinksnumforself(::google::protobuf::int32 value);
  
  // optional int32 goodChildLinksNumForSelf = 12;
  inline bool has_goodchildlinksnumforself() const;
  inline void clear_goodchildlinksnumforself();
  static const int kGoodChildLinksNumForSelfFieldNumber = 12;
  inline ::google::protobuf::int32 goodchildlinksnumforself() const;
  inline void set_goodchildlinksnumforself(::google::protobuf::int32 value);
  
  // optional int32 newChildLinksNumForAll = 13;
  inline bool has_newchildlinksnumforall() const;
  inline void clear_newchildlinksnumforall();
  static const int kNewChildLinksNumForAllFieldNumber = 13;
  inline ::google::protobuf::int32 newchildlinksnumforall() const;
  inline void set_newchildlinksnumforall(::google::protobuf::int32 value);
  
  // optional int32 goodChildLinksNumForAll = 14;
  inline bool has_goodchildlinksnumforall() const;
  inline void clear_goodchildlinksnumforall();
  static const int kGoodChildLinksNumForAllFieldNumber = 14;
  inline ::google::protobuf::int32 goodchildlinksnumforall() const;
  inline void set_goodchildlinksnumforall(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:LinkBase.LinkBaseAttr.CrawlHistory)
 private:
  inline void set_has_downloadtime();
  inline void clear_has_downloadtime();
  inline void set_has_httpcode();
  inline void clear_has_httpcode();
  inline void set_has_contentsize();
  inline void clear_has_contentsize();
  inline void set_has_innerlinksnum();
  inline void clear_has_innerlinksnum();
  inline void set_has_inneranchorlength();
  inline void clear_has_inneranchorlength();
  inline void set_has_outerlinksnum();
  inline void clear_has_outerlinksnum();
  inline void set_has_outeranchorlength();
  inline void clear_has_outeranchorlength();
  inline void set_has_newchildlinksnumforself();
  inline void clear_has_newchildlinksnumforself();
  inline void set_has_goodchildlinksnumforself();
  inline void clear_has_goodchildlinksnumforself();
  inline void set_has_newchildlinksnumforall();
  inline void clear_has_newchildlinksnumforall();
  inline void set_has_goodchildlinksnumforall();
  inline void clear_has_goodchildlinksnumforall();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 downloadtime_;
  ::google::protobuf::int32 httpcode_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > contentmd5_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > innerlinksmd5_;
  ::google::protobuf::int32 contentsize_;
  ::google::protobuf::int32 innerlinksnum_;
  ::google::protobuf::int32 inneranchorlength_;
  ::google::protobuf::int32 outerlinksnum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > etagmd5_;
  ::google::protobuf::int32 outeranchorlength_;
  ::google::protobuf::int32 newchildlinksnumforself_;
  ::google::protobuf::int32 goodchildlinksnumforself_;
  ::google::protobuf::int32 newchildlinksnumforall_;
  ::google::protobuf::int32 goodchildlinksnumforall_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_linkbase_2eproto();
  friend void protobuf_AssignDesc_linkbase_2eproto();
  friend void protobuf_ShutdownFile_linkbase_2eproto();
  
  void InitAsDefaultInstance();
  static LinkBaseAttr_CrawlHistory* default_instance_;
};
// -------------------------------------------------------------------

class LinkBaseAttr : public ::google::protobuf::Message {
 public:
  LinkBaseAttr();
  virtual ~LinkBaseAttr();
  
  LinkBaseAttr(const LinkBaseAttr& from);
  
  inline LinkBaseAttr& operator=(const LinkBaseAttr& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkBaseAttr& default_instance();
  
  void Swap(LinkBaseAttr* other);
  
  // implements Message ----------------------------------------------
  
  LinkBaseAttr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LinkBaseAttr& from);
  void MergeFrom(const LinkBaseAttr& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef LinkBaseAttr_CrawlHistory CrawlHistory;
  
  // accessors -------------------------------------------------------
  
  // optional string anchor = 1;
  inline bool has_anchor() const;
  inline void clear_anchor();
  static const int kAnchorFieldNumber = 1;
  inline const ::std::string& anchor() const;
  inline void set_anchor(const ::std::string& value);
  inline void set_anchor(const char* value);
  inline void set_anchor(const char* value, size_t size);
  inline ::std::string* mutable_anchor();
  inline ::std::string* release_anchor();
  
  // repeated fixed64 contentMD5 = 2;
  inline int contentmd5_size() const;
  inline void clear_contentmd5();
  static const int kContentMD5FieldNumber = 2;
  inline ::google::protobuf::uint64 contentmd5(int index) const;
  inline void set_contentmd5(int index, ::google::protobuf::uint64 value);
  inline void add_contentmd5(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      contentmd5() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_contentmd5();
  
  // optional int32 depth = 3;
  inline bool has_depth() const;
  inline void clear_depth();
  static const int kDepthFieldNumber = 3;
  inline ::google::protobuf::int32 depth() const;
  inline void set_depth(::google::protobuf::int32 value);
  
  // repeated fixed64 etagMD5 = 4;
  inline int etagmd5_size() const;
  inline void clear_etagmd5();
  static const int kEtagMD5FieldNumber = 4;
  inline ::google::protobuf::uint64 etagmd5(int index) const;
  inline void set_etagmd5(int index, ::google::protobuf::uint64 value);
  inline void add_etagmd5(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      etagmd5() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_etagmd5();
  
  // optional uint32 foundTime = 5;
  inline bool has_foundtime() const;
  inline void clear_foundtime();
  static const int kFoundTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 foundtime() const;
  inline void set_foundtime(::google::protobuf::uint32 value);
  
  // optional string parentPage = 6;
  inline bool has_parentpage() const;
  inline void clear_parentpage();
  static const int kParentPageFieldNumber = 6;
  inline const ::std::string& parentpage() const;
  inline void set_parentpage(const ::std::string& value);
  inline void set_parentpage(const char* value);
  inline void set_parentpage(const char* value, size_t size);
  inline ::std::string* mutable_parentpage();
  inline ::std::string* release_parentpage();
  
  // repeated fixed64 innerLinksMD5 = 7;
  inline int innerlinksmd5_size() const;
  inline void clear_innerlinksmd5();
  static const int kInnerLinksMD5FieldNumber = 7;
  inline ::google::protobuf::uint64 innerlinksmd5(int index) const;
  inline void set_innerlinksmd5(int index, ::google::protobuf::uint64 value);
  inline void add_innerlinksmd5(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      innerlinksmd5() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_innerlinksmd5();
  
  // repeated .LinkBase.LinkBaseAttr.CrawlHistory normalCrawlHis = 8;
  inline int normalcrawlhis_size() const;
  inline void clear_normalcrawlhis();
  static const int kNormalCrawlHisFieldNumber = 8;
  inline const ::LinkBase::LinkBaseAttr_CrawlHistory& normalcrawlhis(int index) const;
  inline ::LinkBase::LinkBaseAttr_CrawlHistory* mutable_normalcrawlhis(int index);
  inline ::LinkBase::LinkBaseAttr_CrawlHistory* add_normalcrawlhis();
  inline const ::google::protobuf::RepeatedPtrField< ::LinkBase::LinkBaseAttr_CrawlHistory >&
      normalcrawlhis() const;
  inline ::google::protobuf::RepeatedPtrField< ::LinkBase::LinkBaseAttr_CrawlHistory >*
      mutable_normalcrawlhis();
  
  // repeated .LinkBase.LinkBaseAttr.CrawlHistory otherCrawlHis = 9;
  inline int othercrawlhis_size() const;
  inline void clear_othercrawlhis();
  static const int kOtherCrawlHisFieldNumber = 9;
  inline const ::LinkBase::LinkBaseAttr_CrawlHistory& othercrawlhis(int index) const;
  inline ::LinkBase::LinkBaseAttr_CrawlHistory* mutable_othercrawlhis(int index);
  inline ::LinkBase::LinkBaseAttr_CrawlHistory* add_othercrawlhis();
  inline const ::google::protobuf::RepeatedPtrField< ::LinkBase::LinkBaseAttr_CrawlHistory >&
      othercrawlhis() const;
  inline ::google::protobuf::RepeatedPtrField< ::LinkBase::LinkBaseAttr_CrawlHistory >*
      mutable_othercrawlhis();
  
  // repeated .LinkBase.LinkBaseAttr.CrawlHistory hubCrawlHis = 10;
  inline int hubcrawlhis_size() const;
  inline void clear_hubcrawlhis();
  static const int kHubCrawlHisFieldNumber = 10;
  inline const ::LinkBase::LinkBaseAttr_CrawlHistory& hubcrawlhis(int index) const;
  inline ::LinkBase::LinkBaseAttr_CrawlHistory* mutable_hubcrawlhis(int index);
  inline ::LinkBase::LinkBaseAttr_CrawlHistory* add_hubcrawlhis();
  inline const ::google::protobuf::RepeatedPtrField< ::LinkBase::LinkBaseAttr_CrawlHistory >&
      hubcrawlhis() const;
  inline ::google::protobuf::RepeatedPtrField< ::LinkBase::LinkBaseAttr_CrawlHistory >*
      mutable_hubcrawlhis();
  
  // optional int32 innerLinksNum = 11;
  inline bool has_innerlinksnum() const;
  inline void clear_innerlinksnum();
  static const int kInnerLinksNumFieldNumber = 11;
  inline ::google::protobuf::int32 innerlinksnum() const;
  inline void set_innerlinksnum(::google::protobuf::int32 value);
  
  // optional int32 asSeedLevel = 12;
  inline bool has_asseedlevel() const;
  inline void clear_asseedlevel();
  static const int kAsSeedLevelFieldNumber = 12;
  inline ::google::protobuf::int32 asseedlevel() const;
  inline void set_asseedlevel(::google::protobuf::int32 value);
  
  // optional uint32 pagePublishDate = 13;
  inline bool has_pagepublishdate() const;
  inline void clear_pagepublishdate();
  static const int kPagePublishDateFieldNumber = 13;
  inline ::google::protobuf::uint32 pagepublishdate() const;
  inline void set_pagepublishdate(::google::protobuf::uint32 value);
  
  // optional int32 linksNumAfterBloomFilter = 14;
  inline bool has_linksnumafterbloomfilter() const;
  inline void clear_linksnumafterbloomfilter();
  static const int kLinksNumAfterBloomFilterFieldNumber = 14;
  inline ::google::protobuf::int32 linksnumafterbloomfilter() const;
  inline void set_linksnumafterbloomfilter(::google::protobuf::int32 value);
  
  // optional string normalizedUrl = 15;
  inline bool has_normalizedurl() const;
  inline void clear_normalizedurl();
  static const int kNormalizedUrlFieldNumber = 15;
  inline const ::std::string& normalizedurl() const;
  inline void set_normalizedurl(const ::std::string& value);
  inline void set_normalizedurl(const char* value);
  inline void set_normalizedurl(const char* value, size_t size);
  inline ::std::string* mutable_normalizedurl();
  inline ::std::string* release_normalizedurl();
  
  // optional int32 linksNumAfterLinkFilter = 16;
  inline bool has_linksnumafterlinkfilter() const;
  inline void clear_linksnumafterlinkfilter();
  static const int kLinksNumAfterLinkFilterFieldNumber = 16;
  inline ::google::protobuf::int32 linksnumafterlinkfilter() const;
  inline void set_linksnumafterlinkfilter(::google::protobuf::int32 value);
  
  // optional string durl = 17;
  inline bool has_durl() const;
  inline void clear_durl();
  static const int kDurlFieldNumber = 17;
  inline const ::std::string& durl() const;
  inline void set_durl(const ::std::string& value);
  inline void set_durl(const char* value);
  inline void set_durl(const char* value, size_t size);
  inline ::std::string* mutable_durl();
  inline ::std::string* release_durl();
  
  // optional int32 outerLinksNum = 18;
  inline bool has_outerlinksnum() const;
  inline void clear_outerlinksnum();
  static const int kOuterLinksNumFieldNumber = 18;
  inline ::google::protobuf::int32 outerlinksnum() const;
  inline void set_outerlinksnum(::google::protobuf::int32 value);
  
  // optional int64 browseUV = 19;
  inline bool has_browseuv() const;
  inline void clear_browseuv();
  static const int kBrowseUVFieldNumber = 19;
  inline ::google::protobuf::int64 browseuv() const;
  inline void set_browseuv(::google::protobuf::int64 value);
  
  // optional int64 searchUV = 20;
  inline bool has_searchuv() const;
  inline void clear_searchuv();
  static const int kSearchUVFieldNumber = 20;
  inline ::google::protobuf::int64 searchuv() const;
  inline void set_searchuv(::google::protobuf::int64 value);
  
  // optional bool isNewLink = 21;
  inline bool has_isnewlink() const;
  inline void clear_isnewlink();
  static const int kIsNewLinkFieldNumber = 21;
  inline bool isnewlink() const;
  inline void set_isnewlink(bool value);
  
  // optional string downloadType = 22;
  inline bool has_downloadtype() const;
  inline void clear_downloadtype();
  static const int kDownloadTypeFieldNumber = 22;
  inline const ::std::string& downloadtype() const;
  inline void set_downloadtype(const ::std::string& value);
  inline void set_downloadtype(const char* value);
  inline void set_downloadtype(const char* value, size_t size);
  inline ::std::string* mutable_downloadtype();
  inline ::std::string* release_downloadtype();
  
  // optional string manualImportTag = 23;
  inline bool has_manualimporttag() const;
  inline void clear_manualimporttag();
  static const int kManualImportTagFieldNumber = 23;
  inline const ::std::string& manualimporttag() const;
  inline void set_manualimporttag(const ::std::string& value);
  inline void set_manualimporttag(const char* value);
  inline void set_manualimporttag(const char* value, size_t size);
  inline ::std::string* mutable_manualimporttag();
  inline ::std::string* release_manualimporttag();
  
  // optional string pageLanguage = 24;
  inline bool has_pagelanguage() const;
  inline void clear_pagelanguage();
  static const int kPageLanguageFieldNumber = 24;
  inline const ::std::string& pagelanguage() const;
  inline void set_pagelanguage(const ::std::string& value);
  inline void set_pagelanguage(const char* value);
  inline void set_pagelanguage(const char* value, size_t size);
  inline ::std::string* mutable_pagelanguage();
  inline ::std::string* release_pagelanguage();
  
  // optional int64 parentBrowseUV = 25;
  inline bool has_parentbrowseuv() const;
  inline void clear_parentbrowseuv();
  static const int kParentBrowseUVFieldNumber = 25;
  inline ::google::protobuf::int64 parentbrowseuv() const;
  inline void set_parentbrowseuv(::google::protobuf::int64 value);
  
  // optional string pageRank = 26;
  inline bool has_pagerank() const;
  inline void clear_pagerank();
  static const int kPageRankFieldNumber = 26;
  inline const ::std::string& pagerank() const;
  inline void set_pagerank(const ::std::string& value);
  inline void set_pagerank(const char* value);
  inline void set_pagerank(const char* value, size_t size);
  inline ::std::string* mutable_pagerank();
  inline ::std::string* release_pagerank();
  
  // optional string parentPageRank = 27;
  inline bool has_parentpagerank() const;
  inline void clear_parentpagerank();
  static const int kParentPageRankFieldNumber = 27;
  inline const ::std::string& parentpagerank() const;
  inline void set_parentpagerank(const ::std::string& value);
  inline void set_parentpagerank(const char* value);
  inline void set_parentpagerank(const char* value, size_t size);
  inline ::std::string* mutable_parentpagerank();
  inline ::std::string* release_parentpagerank();
  
  // optional string extends = 28;
  inline bool has_extends() const;
  inline void clear_extends();
  static const int kExtendsFieldNumber = 28;
  inline const ::std::string& extends() const;
  inline void set_extends(const ::std::string& value);
  inline void set_extends(const char* value);
  inline void set_extends(const char* value, size_t size);
  inline ::std::string* mutable_extends();
  inline ::std::string* release_extends();
  
  // optional int32 pageSize = 29;
  inline bool has_pagesize() const;
  inline void clear_pagesize();
  static const int kPageSizeFieldNumber = 29;
  inline ::google::protobuf::int32 pagesize() const;
  inline void set_pagesize(::google::protobuf::int32 value);
  
  // optional string opType = 30;
  inline bool has_optype() const;
  inline void clear_optype();
  static const int kOpTypeFieldNumber = 30;
  inline const ::std::string& optype() const;
  inline void set_optype(const ::std::string& value);
  inline void set_optype(const char* value);
  inline void set_optype(const char* value, size_t size);
  inline ::std::string* mutable_optype();
  inline ::std::string* release_optype();
  
  // optional int32 outerAnchorLength = 31;
  inline bool has_outeranchorlength() const;
  inline void clear_outeranchorlength();
  static const int kOuterAnchorLengthFieldNumber = 31;
  inline ::google::protobuf::int32 outeranchorlength() const;
  inline void set_outeranchorlength(::google::protobuf::int32 value);
  
  // optional uint32 scheduleTime = 32;
  inline bool has_scheduletime() const;
  inline void clear_scheduletime();
  static const int kScheduleTimeFieldNumber = 32;
  inline ::google::protobuf::uint32 scheduletime() const;
  inline void set_scheduletime(::google::protobuf::uint32 value);
  
  // optional int32 errno = 33;
  inline bool has_errno() const;
  inline void clear_errno();
  static const int kErrnoFieldNumber = 33;
  inline ::google::protobuf::int32 errno() const;
  inline void set_errno(::google::protobuf::int32 value);
  
  // optional string bestInnerLinksHrefPattern = 34;
  inline bool has_bestinnerlinkshrefpattern() const;
  inline void clear_bestinnerlinkshrefpattern();
  static const int kBestInnerLinksHrefPatternFieldNumber = 34;
  inline const ::std::string& bestinnerlinkshrefpattern() const;
  inline void set_bestinnerlinkshrefpattern(const ::std::string& value);
  inline void set_bestinnerlinkshrefpattern(const char* value);
  inline void set_bestinnerlinkshrefpattern(const char* value, size_t size);
  inline ::std::string* mutable_bestinnerlinkshrefpattern();
  inline ::std::string* release_bestinnerlinkshrefpattern();
  
  // optional string initParentPage = 35;
  inline bool has_initparentpage() const;
  inline void clear_initparentpage();
  static const int kInitParentPageFieldNumber = 35;
  inline const ::std::string& initparentpage() const;
  inline void set_initparentpage(const ::std::string& value);
  inline void set_initparentpage(const char* value);
  inline void set_initparentpage(const char* value, size_t size);
  inline ::std::string* mutable_initparentpage();
  inline ::std::string* release_initparentpage();
  
  // optional string delReason = 36;
  inline bool has_delreason() const;
  inline void clear_delreason();
  static const int kDelReasonFieldNumber = 36;
  inline const ::std::string& delreason() const;
  inline void set_delreason(const ::std::string& value);
  inline void set_delreason(const char* value);
  inline void set_delreason(const char* value, size_t size);
  inline ::std::string* mutable_delreason();
  inline ::std::string* release_delreason();
  
  // optional int32 orgLinkNum = 37;
  inline bool has_orglinknum() const;
  inline void clear_orglinknum();
  static const int kOrgLinkNumFieldNumber = 37;
  inline ::google::protobuf::int32 orglinknum() const;
  inline void set_orglinknum(::google::protobuf::int32 value);
  
  // optional int64 browsePV = 38;
  inline bool has_browsepv() const;
  inline void clear_browsepv();
  static const int kBrowsePVFieldNumber = 38;
  inline ::google::protobuf::int64 browsepv() const;
  inline void set_browsepv(::google::protobuf::int64 value);
  
  // optional int32 cnDepth = 39;
  inline bool has_cndepth() const;
  inline void clear_cndepth();
  static const int kCnDepthFieldNumber = 39;
  inline ::google::protobuf::int32 cndepth() const;
  inline void set_cndepth(::google::protobuf::int32 value);
  
  // optional string parentPageType = 40;
  inline bool has_parentpagetype() const;
  inline void clear_parentpagetype();
  static const int kParentPageTypeFieldNumber = 40;
  inline const ::std::string& parentpagetype() const;
  inline void set_parentpagetype(const ::std::string& value);
  inline void set_parentpagetype(const char* value);
  inline void set_parentpagetype(const char* value, size_t size);
  inline ::std::string* mutable_parentpagetype();
  inline ::std::string* release_parentpagetype();
  
  // optional uint32 parentDownloadTime = 41;
  inline bool has_parentdownloadtime() const;
  inline void clear_parentdownloadtime();
  static const int kParentDownloadTimeFieldNumber = 41;
  inline ::google::protobuf::uint32 parentdownloadtime() const;
  inline void set_parentdownloadtime(::google::protobuf::uint32 value);
  
  // optional sint32 httpCode = 42;
  inline bool has_httpcode() const;
  inline void clear_httpcode();
  static const int kHttpCodeFieldNumber = 42;
  inline ::google::protobuf::int32 httpcode() const;
  inline void set_httpcode(::google::protobuf::int32 value);
  
  // optional int32 innerAnchorLength = 43;
  inline bool has_inneranchorlength() const;
  inline void clear_inneranchorlength();
  static const int kInnerAnchorLengthFieldNumber = 43;
  inline ::google::protobuf::int32 inneranchorlength() const;
  inline void set_inneranchorlength(::google::protobuf::int32 value);
  
  // optional uint32 latestFoundTime = 44;
  inline bool has_latestfoundtime() const;
  inline void clear_latestfoundtime();
  static const int kLatestFoundTimeFieldNumber = 44;
  inline ::google::protobuf::uint32 latestfoundtime() const;
  inline void set_latestfoundtime(::google::protobuf::uint32 value);
  
  // optional int32 linksNumAfterQssFilter = 45;
  inline bool has_linksnumafterqssfilter() const;
  inline void clear_linksnumafterqssfilter();
  static const int kLinksNumAfterQssFilterFieldNumber = 45;
  inline ::google::protobuf::int32 linksnumafterqssfilter() const;
  inline void set_linksnumafterqssfilter(::google::protobuf::int32 value);
  
  // optional int32 linksNumAfterNormalized = 46;
  inline bool has_linksnumafternormalized() const;
  inline void clear_linksnumafternormalized();
  static const int kLinksNumAfterNormalizedFieldNumber = 46;
  inline ::google::protobuf::int32 linksnumafternormalized() const;
  inline void set_linksnumafternormalized(::google::protobuf::int32 value);
  
  // optional uint32 downloadTime = 47;
  inline bool has_downloadtime() const;
  inline void clear_downloadtime();
  static const int kDownloadTimeFieldNumber = 47;
  inline ::google::protobuf::uint32 downloadtime() const;
  inline void set_downloadtime(::google::protobuf::uint32 value);
  
  // optional int32 contentSize = 48;
  inline bool has_contentsize() const;
  inline void clear_contentsize();
  static const int kContentSizeFieldNumber = 48;
  inline ::google::protobuf::int32 contentsize() const;
  inline void set_contentsize(::google::protobuf::int32 value);
  
  // optional int64 parentSearchUV = 49;
  inline bool has_parentsearchuv() const;
  inline void clear_parentsearchuv();
  static const int kParentSearchUVFieldNumber = 49;
  inline ::google::protobuf::int64 parentsearchuv() const;
  inline void set_parentsearchuv(::google::protobuf::int64 value);
  
  // optional uint32 delTime = 50;
  inline bool has_deltime() const;
  inline void clear_deltime();
  static const int kDelTimeFieldNumber = 50;
  inline ::google::protobuf::uint32 deltime() const;
  inline void set_deltime(::google::protobuf::uint32 value);
  
  // optional int32 parentPageDepth = 51;
  inline bool has_parentpagedepth() const;
  inline void clear_parentpagedepth();
  static const int kParentPageDepthFieldNumber = 51;
  inline ::google::protobuf::int32 parentpagedepth() const;
  inline void set_parentpagedepth(::google::protobuf::int32 value);
  
  // optional string pageType = 52;
  inline bool has_pagetype() const;
  inline void clear_pagetype();
  static const int kPageTypeFieldNumber = 52;
  inline const ::std::string& pagetype() const;
  inline void set_pagetype(const ::std::string& value);
  inline void set_pagetype(const char* value);
  inline void set_pagetype(const char* value, size_t size);
  inline ::std::string* mutable_pagetype();
  inline ::std::string* release_pagetype();
  
  // optional int32 linksNumAfterRobotsFilter = 53;
  inline bool has_linksnumafterrobotsfilter() const;
  inline void clear_linksnumafterrobotsfilter();
  static const int kLinksNumAfterRobotsFilterFieldNumber = 53;
  inline ::google::protobuf::int32 linksnumafterrobotsfilter() const;
  inline void set_linksnumafterrobotsfilter(::google::protobuf::int32 value);
  
  // optional uint32 deadPageTime = 54;
  inline bool has_deadpagetime() const;
  inline void clear_deadpagetime();
  static const int kDeadPageTimeFieldNumber = 54;
  inline ::google::protobuf::uint32 deadpagetime() const;
  inline void set_deadpagetime(::google::protobuf::uint32 value);
  
  // optional uint32 deadLinkTime = 55;
  inline bool has_deadlinktime() const;
  inline void clear_deadlinktime();
  static const int kDeadLinkTimeFieldNumber = 55;
  inline ::google::protobuf::uint32 deadlinktime() const;
  inline void set_deadlinktime(::google::protobuf::uint32 value);
  
  // optional int32 offlinePageType = 56;
  inline bool has_offlinepagetype() const;
  inline void clear_offlinepagetype();
  static const int kOfflinePageTypeFieldNumber = 56;
  inline ::google::protobuf::int32 offlinepagetype() const;
  inline void set_offlinepagetype(::google::protobuf::int32 value);
  
  // optional uint32 firstDownloadTime = 57;
  inline bool has_firstdownloadtime() const;
  inline void clear_firstdownloadtime();
  static const int kFirstDownloadTimeFieldNumber = 57;
  inline ::google::protobuf::uint32 firstdownloadtime() const;
  inline void set_firstdownloadtime(::google::protobuf::uint32 value);
  
  // optional int32 fanyeType = 58;
  inline bool has_fanyetype() const;
  inline void clear_fanyetype();
  static const int kFanyeTypeFieldNumber = 58;
  inline ::google::protobuf::int32 fanyetype() const;
  inline void set_fanyetype(::google::protobuf::int32 value);
  
  // optional int32 deadLinkAdjustSchedulePriority = 59;
  inline bool has_deadlinkadjustschedulepriority() const;
  inline void clear_deadlinkadjustschedulepriority();
  static const int kDeadLinkAdjustSchedulePriorityFieldNumber = 59;
  inline ::google::protobuf::int32 deadlinkadjustschedulepriority() const;
  inline void set_deadlinkadjustschedulepriority(::google::protobuf::int32 value);
  
  // optional string garbageType = 60;
  inline bool has_garbagetype() const;
  inline void clear_garbagetype();
  static const int kGarbageTypeFieldNumber = 60;
  inline const ::std::string& garbagetype() const;
  inline void set_garbagetype(const ::std::string& value);
  inline void set_garbagetype(const char* value);
  inline void set_garbagetype(const char* value, size_t size);
  inline ::std::string* mutable_garbagetype();
  inline ::std::string* release_garbagetype();
  
  // optional uint32 pageModifyDate = 61;
  inline bool has_pagemodifydate() const;
  inline void clear_pagemodifydate();
  static const int kPageModifyDateFieldNumber = 61;
  inline ::google::protobuf::uint32 pagemodifydate() const;
  inline void set_pagemodifydate(::google::protobuf::uint32 value);
  
  // optional int32 childNum = 62;
  inline bool has_childnum() const;
  inline void clear_childnum();
  static const int kChildNumFieldNumber = 62;
  inline ::google::protobuf::int32 childnum() const;
  inline void set_childnum(::google::protobuf::int32 value);
  
  // optional int32 goodChildNum = 63;
  inline bool has_goodchildnum() const;
  inline void clear_goodchildnum();
  static const int kGoodChildNumFieldNumber = 63;
  inline ::google::protobuf::int32 goodchildnum() const;
  inline void set_goodchildnum(::google::protobuf::int32 value);
  
  // optional int32 goodParentStatNum = 64;
  inline bool has_goodparentstatnum() const;
  inline void clear_goodparentstatnum();
  static const int kGoodParentStatNumFieldNumber = 64;
  inline ::google::protobuf::int32 goodparentstatnum() const;
  inline void set_goodparentstatnum(::google::protobuf::int32 value);
  
  // optional bool isExpired = 65;
  inline bool has_isexpired() const;
  inline void clear_isexpired();
  static const int kIsExpiredFieldNumber = 65;
  inline bool isexpired() const;
  inline void set_isexpired(bool value);
  
  // optional int32 parentSeedLevel = 66;
  inline bool has_parentseedlevel() const;
  inline void clear_parentseedlevel();
  static const int kParentSeedLevelFieldNumber = 66;
  inline ::google::protobuf::int32 parentseedlevel() const;
  inline void set_parentseedlevel(::google::protobuf::int32 value);
  
  // optional int32 forbid = 67;
  inline bool has_forbid() const;
  inline void clear_forbid();
  static const int kForbidFieldNumber = 67;
  inline ::google::protobuf::int32 forbid() const;
  inline void set_forbid(::google::protobuf::int32 value);
  
  // optional bool isInIndex = 68;
  inline bool has_isinindex() const;
  inline void clear_isinindex();
  static const int kIsInIndexFieldNumber = 68;
  inline bool isinindex() const;
  inline void set_isinindex(bool value);
  
  // @@protoc_insertion_point(class_scope:LinkBase.LinkBaseAttr)
 private:
  inline void set_has_anchor();
  inline void clear_has_anchor();
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_foundtime();
  inline void clear_has_foundtime();
  inline void set_has_parentpage();
  inline void clear_has_parentpage();
  inline void set_has_innerlinksnum();
  inline void clear_has_innerlinksnum();
  inline void set_has_asseedlevel();
  inline void clear_has_asseedlevel();
  inline void set_has_pagepublishdate();
  inline void clear_has_pagepublishdate();
  inline void set_has_linksnumafterbloomfilter();
  inline void clear_has_linksnumafterbloomfilter();
  inline void set_has_normalizedurl();
  inline void clear_has_normalizedurl();
  inline void set_has_linksnumafterlinkfilter();
  inline void clear_has_linksnumafterlinkfilter();
  inline void set_has_durl();
  inline void clear_has_durl();
  inline void set_has_outerlinksnum();
  inline void clear_has_outerlinksnum();
  inline void set_has_browseuv();
  inline void clear_has_browseuv();
  inline void set_has_searchuv();
  inline void clear_has_searchuv();
  inline void set_has_isnewlink();
  inline void clear_has_isnewlink();
  inline void set_has_downloadtype();
  inline void clear_has_downloadtype();
  inline void set_has_manualimporttag();
  inline void clear_has_manualimporttag();
  inline void set_has_pagelanguage();
  inline void clear_has_pagelanguage();
  inline void set_has_parentbrowseuv();
  inline void clear_has_parentbrowseuv();
  inline void set_has_pagerank();
  inline void clear_has_pagerank();
  inline void set_has_parentpagerank();
  inline void clear_has_parentpagerank();
  inline void set_has_extends();
  inline void clear_has_extends();
  inline void set_has_pagesize();
  inline void clear_has_pagesize();
  inline void set_has_optype();
  inline void clear_has_optype();
  inline void set_has_outeranchorlength();
  inline void clear_has_outeranchorlength();
  inline void set_has_scheduletime();
  inline void clear_has_scheduletime();
  inline void set_has_errno();
  inline void clear_has_errno();
  inline void set_has_bestinnerlinkshrefpattern();
  inline void clear_has_bestinnerlinkshrefpattern();
  inline void set_has_initparentpage();
  inline void clear_has_initparentpage();
  inline void set_has_delreason();
  inline void clear_has_delreason();
  inline void set_has_orglinknum();
  inline void clear_has_orglinknum();
  inline void set_has_browsepv();
  inline void clear_has_browsepv();
  inline void set_has_cndepth();
  inline void clear_has_cndepth();
  inline void set_has_parentpagetype();
  inline void clear_has_parentpagetype();
  inline void set_has_parentdownloadtime();
  inline void clear_has_parentdownloadtime();
  inline void set_has_httpcode();
  inline void clear_has_httpcode();
  inline void set_has_inneranchorlength();
  inline void clear_has_inneranchorlength();
  inline void set_has_latestfoundtime();
  inline void clear_has_latestfoundtime();
  inline void set_has_linksnumafterqssfilter();
  inline void clear_has_linksnumafterqssfilter();
  inline void set_has_linksnumafternormalized();
  inline void clear_has_linksnumafternormalized();
  inline void set_has_downloadtime();
  inline void clear_has_downloadtime();
  inline void set_has_contentsize();
  inline void clear_has_contentsize();
  inline void set_has_parentsearchuv();
  inline void clear_has_parentsearchuv();
  inline void set_has_deltime();
  inline void clear_has_deltime();
  inline void set_has_parentpagedepth();
  inline void clear_has_parentpagedepth();
  inline void set_has_pagetype();
  inline void clear_has_pagetype();
  inline void set_has_linksnumafterrobotsfilter();
  inline void clear_has_linksnumafterrobotsfilter();
  inline void set_has_deadpagetime();
  inline void clear_has_deadpagetime();
  inline void set_has_deadlinktime();
  inline void clear_has_deadlinktime();
  inline void set_has_offlinepagetype();
  inline void clear_has_offlinepagetype();
  inline void set_has_firstdownloadtime();
  inline void clear_has_firstdownloadtime();
  inline void set_has_fanyetype();
  inline void clear_has_fanyetype();
  inline void set_has_deadlinkadjustschedulepriority();
  inline void clear_has_deadlinkadjustschedulepriority();
  inline void set_has_garbagetype();
  inline void clear_has_garbagetype();
  inline void set_has_pagemodifydate();
  inline void clear_has_pagemodifydate();
  inline void set_has_childnum();
  inline void clear_has_childnum();
  inline void set_has_goodchildnum();
  inline void clear_has_goodchildnum();
  inline void set_has_goodparentstatnum();
  inline void clear_has_goodparentstatnum();
  inline void set_has_isexpired();
  inline void clear_has_isexpired();
  inline void set_has_parentseedlevel();
  inline void clear_has_parentseedlevel();
  inline void set_has_forbid();
  inline void clear_has_forbid();
  inline void set_has_isinindex();
  inline void clear_has_isinindex();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* anchor_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > contentmd5_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > etagmd5_;
  ::google::protobuf::int32 depth_;
  ::google::protobuf::uint32 foundtime_;
  ::std::string* parentpage_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > innerlinksmd5_;
  ::google::protobuf::RepeatedPtrField< ::LinkBase::LinkBaseAttr_CrawlHistory > normalcrawlhis_;
  ::google::protobuf::RepeatedPtrField< ::LinkBase::LinkBaseAttr_CrawlHistory > othercrawlhis_;
  ::google::protobuf::RepeatedPtrField< ::LinkBase::LinkBaseAttr_CrawlHistory > hubcrawlhis_;
  ::google::protobuf::int32 innerlinksnum_;
  ::google::protobuf::int32 asseedlevel_;
  ::google::protobuf::uint32 pagepublishdate_;
  ::google::protobuf::int32 linksnumafterbloomfilter_;
  ::std::string* normalizedurl_;
  ::std::string* durl_;
  ::google::protobuf::int32 linksnumafterlinkfilter_;
  ::google::protobuf::int32 outerlinksnum_;
  ::google::protobuf::int64 browseuv_;
  ::google::protobuf::int64 searchuv_;
  ::std::string* downloadtype_;
  ::std::string* manualimporttag_;
  ::std::string* pagelanguage_;
  ::google::protobuf::int64 parentbrowseuv_;
  ::std::string* pagerank_;
  ::std::string* parentpagerank_;
  ::std::string* extends_;
  ::std::string* optype_;
  ::google::protobuf::int32 pagesize_;
  ::google::protobuf::int32 outeranchorlength_;
  ::google::protobuf::uint32 scheduletime_;
  ::google::protobuf::int32 errno_;
  ::std::string* bestinnerlinkshrefpattern_;
  ::std::string* initparentpage_;
  ::std::string* delreason_;
  ::google::protobuf::int32 orglinknum_;
  ::google::protobuf::int32 cndepth_;
  ::google::protobuf::int64 browsepv_;
  ::std::string* parentpagetype_;
  ::google::protobuf::uint32 parentdownloadtime_;
  ::google::protobuf::int32 httpcode_;
  ::google::protobuf::int32 inneranchorlength_;
  ::google::protobuf::uint32 latestfoundtime_;
  ::google::protobuf::int32 linksnumafterqssfilter_;
  ::google::protobuf::int32 linksnumafternormalized_;
  ::google::protobuf::uint32 downloadtime_;
  ::google::protobuf::int32 contentsize_;
  ::google::protobuf::int64 parentsearchuv_;
  ::google::protobuf::uint32 deltime_;
  ::google::protobuf::int32 parentpagedepth_;
  bool isnewlink_;
  bool isexpired_;
  bool isinindex_;
  ::google::protobuf::int32 linksnumafterrobotsfilter_;
  ::std::string* pagetype_;
  ::google::protobuf::uint32 deadpagetime_;
  ::google::protobuf::uint32 deadlinktime_;
  ::google::protobuf::int32 offlinepagetype_;
  ::google::protobuf::uint32 firstdownloadtime_;
  ::google::protobuf::int32 fanyetype_;
  ::google::protobuf::int32 deadlinkadjustschedulepriority_;
  ::std::string* garbagetype_;
  ::google::protobuf::uint32 pagemodifydate_;
  ::google::protobuf::int32 childnum_;
  ::google::protobuf::int32 goodchildnum_;
  ::google::protobuf::int32 goodparentstatnum_;
  ::google::protobuf::int32 parentseedlevel_;
  ::google::protobuf::int32 forbid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(68 + 31) / 32];
  
  friend void  protobuf_AddDesc_linkbase_2eproto();
  friend void protobuf_AssignDesc_linkbase_2eproto();
  friend void protobuf_ShutdownFile_linkbase_2eproto();
  
  void InitAsDefaultInstance();
  static LinkBaseAttr* default_instance_;
};
// ===================================================================


// ===================================================================

// LinkBaseAttr_CrawlHistory

// optional uint32 downloadTime = 1;
inline bool LinkBaseAttr_CrawlHistory::has_downloadtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LinkBaseAttr_CrawlHistory::set_has_downloadtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LinkBaseAttr_CrawlHistory::clear_has_downloadtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LinkBaseAttr_CrawlHistory::clear_downloadtime() {
  downloadtime_ = 0u;
  clear_has_downloadtime();
}
inline ::google::protobuf::uint32 LinkBaseAttr_CrawlHistory::downloadtime() const {
  return downloadtime_;
}
inline void LinkBaseAttr_CrawlHistory::set_downloadtime(::google::protobuf::uint32 value) {
  set_has_downloadtime();
  downloadtime_ = value;
}

// optional sint32 httpCode = 2;
inline bool LinkBaseAttr_CrawlHistory::has_httpcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LinkBaseAttr_CrawlHistory::set_has_httpcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LinkBaseAttr_CrawlHistory::clear_has_httpcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LinkBaseAttr_CrawlHistory::clear_httpcode() {
  httpcode_ = 0;
  clear_has_httpcode();
}
inline ::google::protobuf::int32 LinkBaseAttr_CrawlHistory::httpcode() const {
  return httpcode_;
}
inline void LinkBaseAttr_CrawlHistory::set_httpcode(::google::protobuf::int32 value) {
  set_has_httpcode();
  httpcode_ = value;
}

// repeated fixed64 contentMD5 = 3;
inline int LinkBaseAttr_CrawlHistory::contentmd5_size() const {
  return contentmd5_.size();
}
inline void LinkBaseAttr_CrawlHistory::clear_contentmd5() {
  contentmd5_.Clear();
}
inline ::google::protobuf::uint64 LinkBaseAttr_CrawlHistory::contentmd5(int index) const {
  return contentmd5_.Get(index);
}
inline void LinkBaseAttr_CrawlHistory::set_contentmd5(int index, ::google::protobuf::uint64 value) {
  contentmd5_.Set(index, value);
}
inline void LinkBaseAttr_CrawlHistory::add_contentmd5(::google::protobuf::uint64 value) {
  contentmd5_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LinkBaseAttr_CrawlHistory::contentmd5() const {
  return contentmd5_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LinkBaseAttr_CrawlHistory::mutable_contentmd5() {
  return &contentmd5_;
}

// repeated fixed64 innerLinksMD5 = 4;
inline int LinkBaseAttr_CrawlHistory::innerlinksmd5_size() const {
  return innerlinksmd5_.size();
}
inline void LinkBaseAttr_CrawlHistory::clear_innerlinksmd5() {
  innerlinksmd5_.Clear();
}
inline ::google::protobuf::uint64 LinkBaseAttr_CrawlHistory::innerlinksmd5(int index) const {
  return innerlinksmd5_.Get(index);
}
inline void LinkBaseAttr_CrawlHistory::set_innerlinksmd5(int index, ::google::protobuf::uint64 value) {
  innerlinksmd5_.Set(index, value);
}
inline void LinkBaseAttr_CrawlHistory::add_innerlinksmd5(::google::protobuf::uint64 value) {
  innerlinksmd5_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LinkBaseAttr_CrawlHistory::innerlinksmd5() const {
  return innerlinksmd5_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LinkBaseAttr_CrawlHistory::mutable_innerlinksmd5() {
  return &innerlinksmd5_;
}

// optional int32 contentSize = 5;
inline bool LinkBaseAttr_CrawlHistory::has_contentsize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LinkBaseAttr_CrawlHistory::set_has_contentsize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LinkBaseAttr_CrawlHistory::clear_has_contentsize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LinkBaseAttr_CrawlHistory::clear_contentsize() {
  contentsize_ = 0;
  clear_has_contentsize();
}
inline ::google::protobuf::int32 LinkBaseAttr_CrawlHistory::contentsize() const {
  return contentsize_;
}
inline void LinkBaseAttr_CrawlHistory::set_contentsize(::google::protobuf::int32 value) {
  set_has_contentsize();
  contentsize_ = value;
}

// optional int32 innerLinksNum = 6;
inline bool LinkBaseAttr_CrawlHistory::has_innerlinksnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LinkBaseAttr_CrawlHistory::set_has_innerlinksnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LinkBaseAttr_CrawlHistory::clear_has_innerlinksnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LinkBaseAttr_CrawlHistory::clear_innerlinksnum() {
  innerlinksnum_ = 0;
  clear_has_innerlinksnum();
}
inline ::google::protobuf::int32 LinkBaseAttr_CrawlHistory::innerlinksnum() const {
  return innerlinksnum_;
}
inline void LinkBaseAttr_CrawlHistory::set_innerlinksnum(::google::protobuf::int32 value) {
  set_has_innerlinksnum();
  innerlinksnum_ = value;
}

// optional int32 innerAnchorLength = 7;
inline bool LinkBaseAttr_CrawlHistory::has_inneranchorlength() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LinkBaseAttr_CrawlHistory::set_has_inneranchorlength() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LinkBaseAttr_CrawlHistory::clear_has_inneranchorlength() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LinkBaseAttr_CrawlHistory::clear_inneranchorlength() {
  inneranchorlength_ = 0;
  clear_has_inneranchorlength();
}
inline ::google::protobuf::int32 LinkBaseAttr_CrawlHistory::inneranchorlength() const {
  return inneranchorlength_;
}
inline void LinkBaseAttr_CrawlHistory::set_inneranchorlength(::google::protobuf::int32 value) {
  set_has_inneranchorlength();
  inneranchorlength_ = value;
}

// optional int32 outerLinksNum = 8;
inline bool LinkBaseAttr_CrawlHistory::has_outerlinksnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LinkBaseAttr_CrawlHistory::set_has_outerlinksnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LinkBaseAttr_CrawlHistory::clear_has_outerlinksnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LinkBaseAttr_CrawlHistory::clear_outerlinksnum() {
  outerlinksnum_ = 0;
  clear_has_outerlinksnum();
}
inline ::google::protobuf::int32 LinkBaseAttr_CrawlHistory::outerlinksnum() const {
  return outerlinksnum_;
}
inline void LinkBaseAttr_CrawlHistory::set_outerlinksnum(::google::protobuf::int32 value) {
  set_has_outerlinksnum();
  outerlinksnum_ = value;
}

// optional int32 outerAnchorLength = 9;
inline bool LinkBaseAttr_CrawlHistory::has_outeranchorlength() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LinkBaseAttr_CrawlHistory::set_has_outeranchorlength() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LinkBaseAttr_CrawlHistory::clear_has_outeranchorlength() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LinkBaseAttr_CrawlHistory::clear_outeranchorlength() {
  outeranchorlength_ = 0;
  clear_has_outeranchorlength();
}
inline ::google::protobuf::int32 LinkBaseAttr_CrawlHistory::outeranchorlength() const {
  return outeranchorlength_;
}
inline void LinkBaseAttr_CrawlHistory::set_outeranchorlength(::google::protobuf::int32 value) {
  set_has_outeranchorlength();
  outeranchorlength_ = value;
}

// repeated fixed64 etagMD5 = 10;
inline int LinkBaseAttr_CrawlHistory::etagmd5_size() const {
  return etagmd5_.size();
}
inline void LinkBaseAttr_CrawlHistory::clear_etagmd5() {
  etagmd5_.Clear();
}
inline ::google::protobuf::uint64 LinkBaseAttr_CrawlHistory::etagmd5(int index) const {
  return etagmd5_.Get(index);
}
inline void LinkBaseAttr_CrawlHistory::set_etagmd5(int index, ::google::protobuf::uint64 value) {
  etagmd5_.Set(index, value);
}
inline void LinkBaseAttr_CrawlHistory::add_etagmd5(::google::protobuf::uint64 value) {
  etagmd5_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LinkBaseAttr_CrawlHistory::etagmd5() const {
  return etagmd5_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LinkBaseAttr_CrawlHistory::mutable_etagmd5() {
  return &etagmd5_;
}

// optional int32 newChildLinksNumForSelf = 11;
inline bool LinkBaseAttr_CrawlHistory::has_newchildlinksnumforself() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LinkBaseAttr_CrawlHistory::set_has_newchildlinksnumforself() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LinkBaseAttr_CrawlHistory::clear_has_newchildlinksnumforself() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LinkBaseAttr_CrawlHistory::clear_newchildlinksnumforself() {
  newchildlinksnumforself_ = 0;
  clear_has_newchildlinksnumforself();
}
inline ::google::protobuf::int32 LinkBaseAttr_CrawlHistory::newchildlinksnumforself() const {
  return newchildlinksnumforself_;
}
inline void LinkBaseAttr_CrawlHistory::set_newchildlinksnumforself(::google::protobuf::int32 value) {
  set_has_newchildlinksnumforself();
  newchildlinksnumforself_ = value;
}

// optional int32 goodChildLinksNumForSelf = 12;
inline bool LinkBaseAttr_CrawlHistory::has_goodchildlinksnumforself() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LinkBaseAttr_CrawlHistory::set_has_goodchildlinksnumforself() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LinkBaseAttr_CrawlHistory::clear_has_goodchildlinksnumforself() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LinkBaseAttr_CrawlHistory::clear_goodchildlinksnumforself() {
  goodchildlinksnumforself_ = 0;
  clear_has_goodchildlinksnumforself();
}
inline ::google::protobuf::int32 LinkBaseAttr_CrawlHistory::goodchildlinksnumforself() const {
  return goodchildlinksnumforself_;
}
inline void LinkBaseAttr_CrawlHistory::set_goodchildlinksnumforself(::google::protobuf::int32 value) {
  set_has_goodchildlinksnumforself();
  goodchildlinksnumforself_ = value;
}

// optional int32 newChildLinksNumForAll = 13;
inline bool LinkBaseAttr_CrawlHistory::has_newchildlinksnumforall() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LinkBaseAttr_CrawlHistory::set_has_newchildlinksnumforall() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LinkBaseAttr_CrawlHistory::clear_has_newchildlinksnumforall() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LinkBaseAttr_CrawlHistory::clear_newchildlinksnumforall() {
  newchildlinksnumforall_ = 0;
  clear_has_newchildlinksnumforall();
}
inline ::google::protobuf::int32 LinkBaseAttr_CrawlHistory::newchildlinksnumforall() const {
  return newchildlinksnumforall_;
}
inline void LinkBaseAttr_CrawlHistory::set_newchildlinksnumforall(::google::protobuf::int32 value) {
  set_has_newchildlinksnumforall();
  newchildlinksnumforall_ = value;
}

// optional int32 goodChildLinksNumForAll = 14;
inline bool LinkBaseAttr_CrawlHistory::has_goodchildlinksnumforall() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LinkBaseAttr_CrawlHistory::set_has_goodchildlinksnumforall() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LinkBaseAttr_CrawlHistory::clear_has_goodchildlinksnumforall() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LinkBaseAttr_CrawlHistory::clear_goodchildlinksnumforall() {
  goodchildlinksnumforall_ = 0;
  clear_has_goodchildlinksnumforall();
}
inline ::google::protobuf::int32 LinkBaseAttr_CrawlHistory::goodchildlinksnumforall() const {
  return goodchildlinksnumforall_;
}
inline void LinkBaseAttr_CrawlHistory::set_goodchildlinksnumforall(::google::protobuf::int32 value) {
  set_has_goodchildlinksnumforall();
  goodchildlinksnumforall_ = value;
}

// -------------------------------------------------------------------

// LinkBaseAttr

// optional string anchor = 1;
inline bool LinkBaseAttr::has_anchor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LinkBaseAttr::set_has_anchor() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LinkBaseAttr::clear_has_anchor() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LinkBaseAttr::clear_anchor() {
  if (anchor_ != &::google::protobuf::internal::kEmptyString) {
    anchor_->clear();
  }
  clear_has_anchor();
}
inline const ::std::string& LinkBaseAttr::anchor() const {
  return *anchor_;
}
inline void LinkBaseAttr::set_anchor(const ::std::string& value) {
  set_has_anchor();
  if (anchor_ == &::google::protobuf::internal::kEmptyString) {
    anchor_ = new ::std::string;
  }
  anchor_->assign(value);
}
inline void LinkBaseAttr::set_anchor(const char* value) {
  set_has_anchor();
  if (anchor_ == &::google::protobuf::internal::kEmptyString) {
    anchor_ = new ::std::string;
  }
  anchor_->assign(value);
}
inline void LinkBaseAttr::set_anchor(const char* value, size_t size) {
  set_has_anchor();
  if (anchor_ == &::google::protobuf::internal::kEmptyString) {
    anchor_ = new ::std::string;
  }
  anchor_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkBaseAttr::mutable_anchor() {
  set_has_anchor();
  if (anchor_ == &::google::protobuf::internal::kEmptyString) {
    anchor_ = new ::std::string;
  }
  return anchor_;
}
inline ::std::string* LinkBaseAttr::release_anchor() {
  clear_has_anchor();
  if (anchor_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = anchor_;
    anchor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated fixed64 contentMD5 = 2;
inline int LinkBaseAttr::contentmd5_size() const {
  return contentmd5_.size();
}
inline void LinkBaseAttr::clear_contentmd5() {
  contentmd5_.Clear();
}
inline ::google::protobuf::uint64 LinkBaseAttr::contentmd5(int index) const {
  return contentmd5_.Get(index);
}
inline void LinkBaseAttr::set_contentmd5(int index, ::google::protobuf::uint64 value) {
  contentmd5_.Set(index, value);
}
inline void LinkBaseAttr::add_contentmd5(::google::protobuf::uint64 value) {
  contentmd5_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LinkBaseAttr::contentmd5() const {
  return contentmd5_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LinkBaseAttr::mutable_contentmd5() {
  return &contentmd5_;
}

// optional int32 depth = 3;
inline bool LinkBaseAttr::has_depth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LinkBaseAttr::set_has_depth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LinkBaseAttr::clear_has_depth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LinkBaseAttr::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline ::google::protobuf::int32 LinkBaseAttr::depth() const {
  return depth_;
}
inline void LinkBaseAttr::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
}

// repeated fixed64 etagMD5 = 4;
inline int LinkBaseAttr::etagmd5_size() const {
  return etagmd5_.size();
}
inline void LinkBaseAttr::clear_etagmd5() {
  etagmd5_.Clear();
}
inline ::google::protobuf::uint64 LinkBaseAttr::etagmd5(int index) const {
  return etagmd5_.Get(index);
}
inline void LinkBaseAttr::set_etagmd5(int index, ::google::protobuf::uint64 value) {
  etagmd5_.Set(index, value);
}
inline void LinkBaseAttr::add_etagmd5(::google::protobuf::uint64 value) {
  etagmd5_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LinkBaseAttr::etagmd5() const {
  return etagmd5_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LinkBaseAttr::mutable_etagmd5() {
  return &etagmd5_;
}

// optional uint32 foundTime = 5;
inline bool LinkBaseAttr::has_foundtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LinkBaseAttr::set_has_foundtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LinkBaseAttr::clear_has_foundtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LinkBaseAttr::clear_foundtime() {
  foundtime_ = 0u;
  clear_has_foundtime();
}
inline ::google::protobuf::uint32 LinkBaseAttr::foundtime() const {
  return foundtime_;
}
inline void LinkBaseAttr::set_foundtime(::google::protobuf::uint32 value) {
  set_has_foundtime();
  foundtime_ = value;
}

// optional string parentPage = 6;
inline bool LinkBaseAttr::has_parentpage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LinkBaseAttr::set_has_parentpage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LinkBaseAttr::clear_has_parentpage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LinkBaseAttr::clear_parentpage() {
  if (parentpage_ != &::google::protobuf::internal::kEmptyString) {
    parentpage_->clear();
  }
  clear_has_parentpage();
}
inline const ::std::string& LinkBaseAttr::parentpage() const {
  return *parentpage_;
}
inline void LinkBaseAttr::set_parentpage(const ::std::string& value) {
  set_has_parentpage();
  if (parentpage_ == &::google::protobuf::internal::kEmptyString) {
    parentpage_ = new ::std::string;
  }
  parentpage_->assign(value);
}
inline void LinkBaseAttr::set_parentpage(const char* value) {
  set_has_parentpage();
  if (parentpage_ == &::google::protobuf::internal::kEmptyString) {
    parentpage_ = new ::std::string;
  }
  parentpage_->assign(value);
}
inline void LinkBaseAttr::set_parentpage(const char* value, size_t size) {
  set_has_parentpage();
  if (parentpage_ == &::google::protobuf::internal::kEmptyString) {
    parentpage_ = new ::std::string;
  }
  parentpage_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkBaseAttr::mutable_parentpage() {
  set_has_parentpage();
  if (parentpage_ == &::google::protobuf::internal::kEmptyString) {
    parentpage_ = new ::std::string;
  }
  return parentpage_;
}
inline ::std::string* LinkBaseAttr::release_parentpage() {
  clear_has_parentpage();
  if (parentpage_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = parentpage_;
    parentpage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated fixed64 innerLinksMD5 = 7;
inline int LinkBaseAttr::innerlinksmd5_size() const {
  return innerlinksmd5_.size();
}
inline void LinkBaseAttr::clear_innerlinksmd5() {
  innerlinksmd5_.Clear();
}
inline ::google::protobuf::uint64 LinkBaseAttr::innerlinksmd5(int index) const {
  return innerlinksmd5_.Get(index);
}
inline void LinkBaseAttr::set_innerlinksmd5(int index, ::google::protobuf::uint64 value) {
  innerlinksmd5_.Set(index, value);
}
inline void LinkBaseAttr::add_innerlinksmd5(::google::protobuf::uint64 value) {
  innerlinksmd5_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LinkBaseAttr::innerlinksmd5() const {
  return innerlinksmd5_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LinkBaseAttr::mutable_innerlinksmd5() {
  return &innerlinksmd5_;
}

// repeated .LinkBase.LinkBaseAttr.CrawlHistory normalCrawlHis = 8;
inline int LinkBaseAttr::normalcrawlhis_size() const {
  return normalcrawlhis_.size();
}
inline void LinkBaseAttr::clear_normalcrawlhis() {
  normalcrawlhis_.Clear();
}
inline const ::LinkBase::LinkBaseAttr_CrawlHistory& LinkBaseAttr::normalcrawlhis(int index) const {
  return normalcrawlhis_.Get(index);
}
inline ::LinkBase::LinkBaseAttr_CrawlHistory* LinkBaseAttr::mutable_normalcrawlhis(int index) {
  return normalcrawlhis_.Mutable(index);
}
inline ::LinkBase::LinkBaseAttr_CrawlHistory* LinkBaseAttr::add_normalcrawlhis() {
  return normalcrawlhis_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LinkBase::LinkBaseAttr_CrawlHistory >&
LinkBaseAttr::normalcrawlhis() const {
  return normalcrawlhis_;
}
inline ::google::protobuf::RepeatedPtrField< ::LinkBase::LinkBaseAttr_CrawlHistory >*
LinkBaseAttr::mutable_normalcrawlhis() {
  return &normalcrawlhis_;
}

// repeated .LinkBase.LinkBaseAttr.CrawlHistory otherCrawlHis = 9;
inline int LinkBaseAttr::othercrawlhis_size() const {
  return othercrawlhis_.size();
}
inline void LinkBaseAttr::clear_othercrawlhis() {
  othercrawlhis_.Clear();
}
inline const ::LinkBase::LinkBaseAttr_CrawlHistory& LinkBaseAttr::othercrawlhis(int index) const {
  return othercrawlhis_.Get(index);
}
inline ::LinkBase::LinkBaseAttr_CrawlHistory* LinkBaseAttr::mutable_othercrawlhis(int index) {
  return othercrawlhis_.Mutable(index);
}
inline ::LinkBase::LinkBaseAttr_CrawlHistory* LinkBaseAttr::add_othercrawlhis() {
  return othercrawlhis_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LinkBase::LinkBaseAttr_CrawlHistory >&
LinkBaseAttr::othercrawlhis() const {
  return othercrawlhis_;
}
inline ::google::protobuf::RepeatedPtrField< ::LinkBase::LinkBaseAttr_CrawlHistory >*
LinkBaseAttr::mutable_othercrawlhis() {
  return &othercrawlhis_;
}

// repeated .LinkBase.LinkBaseAttr.CrawlHistory hubCrawlHis = 10;
inline int LinkBaseAttr::hubcrawlhis_size() const {
  return hubcrawlhis_.size();
}
inline void LinkBaseAttr::clear_hubcrawlhis() {
  hubcrawlhis_.Clear();
}
inline const ::LinkBase::LinkBaseAttr_CrawlHistory& LinkBaseAttr::hubcrawlhis(int index) const {
  return hubcrawlhis_.Get(index);
}
inline ::LinkBase::LinkBaseAttr_CrawlHistory* LinkBaseAttr::mutable_hubcrawlhis(int index) {
  return hubcrawlhis_.Mutable(index);
}
inline ::LinkBase::LinkBaseAttr_CrawlHistory* LinkBaseAttr::add_hubcrawlhis() {
  return hubcrawlhis_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LinkBase::LinkBaseAttr_CrawlHistory >&
LinkBaseAttr::hubcrawlhis() const {
  return hubcrawlhis_;
}
inline ::google::protobuf::RepeatedPtrField< ::LinkBase::LinkBaseAttr_CrawlHistory >*
LinkBaseAttr::mutable_hubcrawlhis() {
  return &hubcrawlhis_;
}

// optional int32 innerLinksNum = 11;
inline bool LinkBaseAttr::has_innerlinksnum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LinkBaseAttr::set_has_innerlinksnum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LinkBaseAttr::clear_has_innerlinksnum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LinkBaseAttr::clear_innerlinksnum() {
  innerlinksnum_ = 0;
  clear_has_innerlinksnum();
}
inline ::google::protobuf::int32 LinkBaseAttr::innerlinksnum() const {
  return innerlinksnum_;
}
inline void LinkBaseAttr::set_innerlinksnum(::google::protobuf::int32 value) {
  set_has_innerlinksnum();
  innerlinksnum_ = value;
}

// optional int32 asSeedLevel = 12;
inline bool LinkBaseAttr::has_asseedlevel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LinkBaseAttr::set_has_asseedlevel() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LinkBaseAttr::clear_has_asseedlevel() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LinkBaseAttr::clear_asseedlevel() {
  asseedlevel_ = 0;
  clear_has_asseedlevel();
}
inline ::google::protobuf::int32 LinkBaseAttr::asseedlevel() const {
  return asseedlevel_;
}
inline void LinkBaseAttr::set_asseedlevel(::google::protobuf::int32 value) {
  set_has_asseedlevel();
  asseedlevel_ = value;
}

// optional uint32 pagePublishDate = 13;
inline bool LinkBaseAttr::has_pagepublishdate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LinkBaseAttr::set_has_pagepublishdate() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LinkBaseAttr::clear_has_pagepublishdate() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LinkBaseAttr::clear_pagepublishdate() {
  pagepublishdate_ = 0u;
  clear_has_pagepublishdate();
}
inline ::google::protobuf::uint32 LinkBaseAttr::pagepublishdate() const {
  return pagepublishdate_;
}
inline void LinkBaseAttr::set_pagepublishdate(::google::protobuf::uint32 value) {
  set_has_pagepublishdate();
  pagepublishdate_ = value;
}

// optional int32 linksNumAfterBloomFilter = 14;
inline bool LinkBaseAttr::has_linksnumafterbloomfilter() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LinkBaseAttr::set_has_linksnumafterbloomfilter() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LinkBaseAttr::clear_has_linksnumafterbloomfilter() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LinkBaseAttr::clear_linksnumafterbloomfilter() {
  linksnumafterbloomfilter_ = 0;
  clear_has_linksnumafterbloomfilter();
}
inline ::google::protobuf::int32 LinkBaseAttr::linksnumafterbloomfilter() const {
  return linksnumafterbloomfilter_;
}
inline void LinkBaseAttr::set_linksnumafterbloomfilter(::google::protobuf::int32 value) {
  set_has_linksnumafterbloomfilter();
  linksnumafterbloomfilter_ = value;
}

// optional string normalizedUrl = 15;
inline bool LinkBaseAttr::has_normalizedurl() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LinkBaseAttr::set_has_normalizedurl() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LinkBaseAttr::clear_has_normalizedurl() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LinkBaseAttr::clear_normalizedurl() {
  if (normalizedurl_ != &::google::protobuf::internal::kEmptyString) {
    normalizedurl_->clear();
  }
  clear_has_normalizedurl();
}
inline const ::std::string& LinkBaseAttr::normalizedurl() const {
  return *normalizedurl_;
}
inline void LinkBaseAttr::set_normalizedurl(const ::std::string& value) {
  set_has_normalizedurl();
  if (normalizedurl_ == &::google::protobuf::internal::kEmptyString) {
    normalizedurl_ = new ::std::string;
  }
  normalizedurl_->assign(value);
}
inline void LinkBaseAttr::set_normalizedurl(const char* value) {
  set_has_normalizedurl();
  if (normalizedurl_ == &::google::protobuf::internal::kEmptyString) {
    normalizedurl_ = new ::std::string;
  }
  normalizedurl_->assign(value);
}
inline void LinkBaseAttr::set_normalizedurl(const char* value, size_t size) {
  set_has_normalizedurl();
  if (normalizedurl_ == &::google::protobuf::internal::kEmptyString) {
    normalizedurl_ = new ::std::string;
  }
  normalizedurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkBaseAttr::mutable_normalizedurl() {
  set_has_normalizedurl();
  if (normalizedurl_ == &::google::protobuf::internal::kEmptyString) {
    normalizedurl_ = new ::std::string;
  }
  return normalizedurl_;
}
inline ::std::string* LinkBaseAttr::release_normalizedurl() {
  clear_has_normalizedurl();
  if (normalizedurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = normalizedurl_;
    normalizedurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 linksNumAfterLinkFilter = 16;
inline bool LinkBaseAttr::has_linksnumafterlinkfilter() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LinkBaseAttr::set_has_linksnumafterlinkfilter() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LinkBaseAttr::clear_has_linksnumafterlinkfilter() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LinkBaseAttr::clear_linksnumafterlinkfilter() {
  linksnumafterlinkfilter_ = 0;
  clear_has_linksnumafterlinkfilter();
}
inline ::google::protobuf::int32 LinkBaseAttr::linksnumafterlinkfilter() const {
  return linksnumafterlinkfilter_;
}
inline void LinkBaseAttr::set_linksnumafterlinkfilter(::google::protobuf::int32 value) {
  set_has_linksnumafterlinkfilter();
  linksnumafterlinkfilter_ = value;
}

// optional string durl = 17;
inline bool LinkBaseAttr::has_durl() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LinkBaseAttr::set_has_durl() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LinkBaseAttr::clear_has_durl() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LinkBaseAttr::clear_durl() {
  if (durl_ != &::google::protobuf::internal::kEmptyString) {
    durl_->clear();
  }
  clear_has_durl();
}
inline const ::std::string& LinkBaseAttr::durl() const {
  return *durl_;
}
inline void LinkBaseAttr::set_durl(const ::std::string& value) {
  set_has_durl();
  if (durl_ == &::google::protobuf::internal::kEmptyString) {
    durl_ = new ::std::string;
  }
  durl_->assign(value);
}
inline void LinkBaseAttr::set_durl(const char* value) {
  set_has_durl();
  if (durl_ == &::google::protobuf::internal::kEmptyString) {
    durl_ = new ::std::string;
  }
  durl_->assign(value);
}
inline void LinkBaseAttr::set_durl(const char* value, size_t size) {
  set_has_durl();
  if (durl_ == &::google::protobuf::internal::kEmptyString) {
    durl_ = new ::std::string;
  }
  durl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkBaseAttr::mutable_durl() {
  set_has_durl();
  if (durl_ == &::google::protobuf::internal::kEmptyString) {
    durl_ = new ::std::string;
  }
  return durl_;
}
inline ::std::string* LinkBaseAttr::release_durl() {
  clear_has_durl();
  if (durl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = durl_;
    durl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 outerLinksNum = 18;
inline bool LinkBaseAttr::has_outerlinksnum() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LinkBaseAttr::set_has_outerlinksnum() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LinkBaseAttr::clear_has_outerlinksnum() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LinkBaseAttr::clear_outerlinksnum() {
  outerlinksnum_ = 0;
  clear_has_outerlinksnum();
}
inline ::google::protobuf::int32 LinkBaseAttr::outerlinksnum() const {
  return outerlinksnum_;
}
inline void LinkBaseAttr::set_outerlinksnum(::google::protobuf::int32 value) {
  set_has_outerlinksnum();
  outerlinksnum_ = value;
}

// optional int64 browseUV = 19;
inline bool LinkBaseAttr::has_browseuv() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LinkBaseAttr::set_has_browseuv() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LinkBaseAttr::clear_has_browseuv() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LinkBaseAttr::clear_browseuv() {
  browseuv_ = GOOGLE_LONGLONG(0);
  clear_has_browseuv();
}
inline ::google::protobuf::int64 LinkBaseAttr::browseuv() const {
  return browseuv_;
}
inline void LinkBaseAttr::set_browseuv(::google::protobuf::int64 value) {
  set_has_browseuv();
  browseuv_ = value;
}

// optional int64 searchUV = 20;
inline bool LinkBaseAttr::has_searchuv() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LinkBaseAttr::set_has_searchuv() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LinkBaseAttr::clear_has_searchuv() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LinkBaseAttr::clear_searchuv() {
  searchuv_ = GOOGLE_LONGLONG(0);
  clear_has_searchuv();
}
inline ::google::protobuf::int64 LinkBaseAttr::searchuv() const {
  return searchuv_;
}
inline void LinkBaseAttr::set_searchuv(::google::protobuf::int64 value) {
  set_has_searchuv();
  searchuv_ = value;
}

// optional bool isNewLink = 21;
inline bool LinkBaseAttr::has_isnewlink() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void LinkBaseAttr::set_has_isnewlink() {
  _has_bits_[0] |= 0x00100000u;
}
inline void LinkBaseAttr::clear_has_isnewlink() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void LinkBaseAttr::clear_isnewlink() {
  isnewlink_ = false;
  clear_has_isnewlink();
}
inline bool LinkBaseAttr::isnewlink() const {
  return isnewlink_;
}
inline void LinkBaseAttr::set_isnewlink(bool value) {
  set_has_isnewlink();
  isnewlink_ = value;
}

// optional string downloadType = 22;
inline bool LinkBaseAttr::has_downloadtype() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void LinkBaseAttr::set_has_downloadtype() {
  _has_bits_[0] |= 0x00200000u;
}
inline void LinkBaseAttr::clear_has_downloadtype() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void LinkBaseAttr::clear_downloadtype() {
  if (downloadtype_ != &::google::protobuf::internal::kEmptyString) {
    downloadtype_->clear();
  }
  clear_has_downloadtype();
}
inline const ::std::string& LinkBaseAttr::downloadtype() const {
  return *downloadtype_;
}
inline void LinkBaseAttr::set_downloadtype(const ::std::string& value) {
  set_has_downloadtype();
  if (downloadtype_ == &::google::protobuf::internal::kEmptyString) {
    downloadtype_ = new ::std::string;
  }
  downloadtype_->assign(value);
}
inline void LinkBaseAttr::set_downloadtype(const char* value) {
  set_has_downloadtype();
  if (downloadtype_ == &::google::protobuf::internal::kEmptyString) {
    downloadtype_ = new ::std::string;
  }
  downloadtype_->assign(value);
}
inline void LinkBaseAttr::set_downloadtype(const char* value, size_t size) {
  set_has_downloadtype();
  if (downloadtype_ == &::google::protobuf::internal::kEmptyString) {
    downloadtype_ = new ::std::string;
  }
  downloadtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkBaseAttr::mutable_downloadtype() {
  set_has_downloadtype();
  if (downloadtype_ == &::google::protobuf::internal::kEmptyString) {
    downloadtype_ = new ::std::string;
  }
  return downloadtype_;
}
inline ::std::string* LinkBaseAttr::release_downloadtype() {
  clear_has_downloadtype();
  if (downloadtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = downloadtype_;
    downloadtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string manualImportTag = 23;
inline bool LinkBaseAttr::has_manualimporttag() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void LinkBaseAttr::set_has_manualimporttag() {
  _has_bits_[0] |= 0x00400000u;
}
inline void LinkBaseAttr::clear_has_manualimporttag() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void LinkBaseAttr::clear_manualimporttag() {
  if (manualimporttag_ != &::google::protobuf::internal::kEmptyString) {
    manualimporttag_->clear();
  }
  clear_has_manualimporttag();
}
inline const ::std::string& LinkBaseAttr::manualimporttag() const {
  return *manualimporttag_;
}
inline void LinkBaseAttr::set_manualimporttag(const ::std::string& value) {
  set_has_manualimporttag();
  if (manualimporttag_ == &::google::protobuf::internal::kEmptyString) {
    manualimporttag_ = new ::std::string;
  }
  manualimporttag_->assign(value);
}
inline void LinkBaseAttr::set_manualimporttag(const char* value) {
  set_has_manualimporttag();
  if (manualimporttag_ == &::google::protobuf::internal::kEmptyString) {
    manualimporttag_ = new ::std::string;
  }
  manualimporttag_->assign(value);
}
inline void LinkBaseAttr::set_manualimporttag(const char* value, size_t size) {
  set_has_manualimporttag();
  if (manualimporttag_ == &::google::protobuf::internal::kEmptyString) {
    manualimporttag_ = new ::std::string;
  }
  manualimporttag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkBaseAttr::mutable_manualimporttag() {
  set_has_manualimporttag();
  if (manualimporttag_ == &::google::protobuf::internal::kEmptyString) {
    manualimporttag_ = new ::std::string;
  }
  return manualimporttag_;
}
inline ::std::string* LinkBaseAttr::release_manualimporttag() {
  clear_has_manualimporttag();
  if (manualimporttag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = manualimporttag_;
    manualimporttag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string pageLanguage = 24;
inline bool LinkBaseAttr::has_pagelanguage() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void LinkBaseAttr::set_has_pagelanguage() {
  _has_bits_[0] |= 0x00800000u;
}
inline void LinkBaseAttr::clear_has_pagelanguage() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void LinkBaseAttr::clear_pagelanguage() {
  if (pagelanguage_ != &::google::protobuf::internal::kEmptyString) {
    pagelanguage_->clear();
  }
  clear_has_pagelanguage();
}
inline const ::std::string& LinkBaseAttr::pagelanguage() const {
  return *pagelanguage_;
}
inline void LinkBaseAttr::set_pagelanguage(const ::std::string& value) {
  set_has_pagelanguage();
  if (pagelanguage_ == &::google::protobuf::internal::kEmptyString) {
    pagelanguage_ = new ::std::string;
  }
  pagelanguage_->assign(value);
}
inline void LinkBaseAttr::set_pagelanguage(const char* value) {
  set_has_pagelanguage();
  if (pagelanguage_ == &::google::protobuf::internal::kEmptyString) {
    pagelanguage_ = new ::std::string;
  }
  pagelanguage_->assign(value);
}
inline void LinkBaseAttr::set_pagelanguage(const char* value, size_t size) {
  set_has_pagelanguage();
  if (pagelanguage_ == &::google::protobuf::internal::kEmptyString) {
    pagelanguage_ = new ::std::string;
  }
  pagelanguage_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkBaseAttr::mutable_pagelanguage() {
  set_has_pagelanguage();
  if (pagelanguage_ == &::google::protobuf::internal::kEmptyString) {
    pagelanguage_ = new ::std::string;
  }
  return pagelanguage_;
}
inline ::std::string* LinkBaseAttr::release_pagelanguage() {
  clear_has_pagelanguage();
  if (pagelanguage_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pagelanguage_;
    pagelanguage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 parentBrowseUV = 25;
inline bool LinkBaseAttr::has_parentbrowseuv() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void LinkBaseAttr::set_has_parentbrowseuv() {
  _has_bits_[0] |= 0x01000000u;
}
inline void LinkBaseAttr::clear_has_parentbrowseuv() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void LinkBaseAttr::clear_parentbrowseuv() {
  parentbrowseuv_ = GOOGLE_LONGLONG(0);
  clear_has_parentbrowseuv();
}
inline ::google::protobuf::int64 LinkBaseAttr::parentbrowseuv() const {
  return parentbrowseuv_;
}
inline void LinkBaseAttr::set_parentbrowseuv(::google::protobuf::int64 value) {
  set_has_parentbrowseuv();
  parentbrowseuv_ = value;
}

// optional string pageRank = 26;
inline bool LinkBaseAttr::has_pagerank() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void LinkBaseAttr::set_has_pagerank() {
  _has_bits_[0] |= 0x02000000u;
}
inline void LinkBaseAttr::clear_has_pagerank() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void LinkBaseAttr::clear_pagerank() {
  if (pagerank_ != &::google::protobuf::internal::kEmptyString) {
    pagerank_->clear();
  }
  clear_has_pagerank();
}
inline const ::std::string& LinkBaseAttr::pagerank() const {
  return *pagerank_;
}
inline void LinkBaseAttr::set_pagerank(const ::std::string& value) {
  set_has_pagerank();
  if (pagerank_ == &::google::protobuf::internal::kEmptyString) {
    pagerank_ = new ::std::string;
  }
  pagerank_->assign(value);
}
inline void LinkBaseAttr::set_pagerank(const char* value) {
  set_has_pagerank();
  if (pagerank_ == &::google::protobuf::internal::kEmptyString) {
    pagerank_ = new ::std::string;
  }
  pagerank_->assign(value);
}
inline void LinkBaseAttr::set_pagerank(const char* value, size_t size) {
  set_has_pagerank();
  if (pagerank_ == &::google::protobuf::internal::kEmptyString) {
    pagerank_ = new ::std::string;
  }
  pagerank_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkBaseAttr::mutable_pagerank() {
  set_has_pagerank();
  if (pagerank_ == &::google::protobuf::internal::kEmptyString) {
    pagerank_ = new ::std::string;
  }
  return pagerank_;
}
inline ::std::string* LinkBaseAttr::release_pagerank() {
  clear_has_pagerank();
  if (pagerank_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pagerank_;
    pagerank_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string parentPageRank = 27;
inline bool LinkBaseAttr::has_parentpagerank() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void LinkBaseAttr::set_has_parentpagerank() {
  _has_bits_[0] |= 0x04000000u;
}
inline void LinkBaseAttr::clear_has_parentpagerank() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void LinkBaseAttr::clear_parentpagerank() {
  if (parentpagerank_ != &::google::protobuf::internal::kEmptyString) {
    parentpagerank_->clear();
  }
  clear_has_parentpagerank();
}
inline const ::std::string& LinkBaseAttr::parentpagerank() const {
  return *parentpagerank_;
}
inline void LinkBaseAttr::set_parentpagerank(const ::std::string& value) {
  set_has_parentpagerank();
  if (parentpagerank_ == &::google::protobuf::internal::kEmptyString) {
    parentpagerank_ = new ::std::string;
  }
  parentpagerank_->assign(value);
}
inline void LinkBaseAttr::set_parentpagerank(const char* value) {
  set_has_parentpagerank();
  if (parentpagerank_ == &::google::protobuf::internal::kEmptyString) {
    parentpagerank_ = new ::std::string;
  }
  parentpagerank_->assign(value);
}
inline void LinkBaseAttr::set_parentpagerank(const char* value, size_t size) {
  set_has_parentpagerank();
  if (parentpagerank_ == &::google::protobuf::internal::kEmptyString) {
    parentpagerank_ = new ::std::string;
  }
  parentpagerank_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkBaseAttr::mutable_parentpagerank() {
  set_has_parentpagerank();
  if (parentpagerank_ == &::google::protobuf::internal::kEmptyString) {
    parentpagerank_ = new ::std::string;
  }
  return parentpagerank_;
}
inline ::std::string* LinkBaseAttr::release_parentpagerank() {
  clear_has_parentpagerank();
  if (parentpagerank_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = parentpagerank_;
    parentpagerank_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string extends = 28;
inline bool LinkBaseAttr::has_extends() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void LinkBaseAttr::set_has_extends() {
  _has_bits_[0] |= 0x08000000u;
}
inline void LinkBaseAttr::clear_has_extends() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void LinkBaseAttr::clear_extends() {
  if (extends_ != &::google::protobuf::internal::kEmptyString) {
    extends_->clear();
  }
  clear_has_extends();
}
inline const ::std::string& LinkBaseAttr::extends() const {
  return *extends_;
}
inline void LinkBaseAttr::set_extends(const ::std::string& value) {
  set_has_extends();
  if (extends_ == &::google::protobuf::internal::kEmptyString) {
    extends_ = new ::std::string;
  }
  extends_->assign(value);
}
inline void LinkBaseAttr::set_extends(const char* value) {
  set_has_extends();
  if (extends_ == &::google::protobuf::internal::kEmptyString) {
    extends_ = new ::std::string;
  }
  extends_->assign(value);
}
inline void LinkBaseAttr::set_extends(const char* value, size_t size) {
  set_has_extends();
  if (extends_ == &::google::protobuf::internal::kEmptyString) {
    extends_ = new ::std::string;
  }
  extends_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkBaseAttr::mutable_extends() {
  set_has_extends();
  if (extends_ == &::google::protobuf::internal::kEmptyString) {
    extends_ = new ::std::string;
  }
  return extends_;
}
inline ::std::string* LinkBaseAttr::release_extends() {
  clear_has_extends();
  if (extends_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = extends_;
    extends_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 pageSize = 29;
inline bool LinkBaseAttr::has_pagesize() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void LinkBaseAttr::set_has_pagesize() {
  _has_bits_[0] |= 0x10000000u;
}
inline void LinkBaseAttr::clear_has_pagesize() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void LinkBaseAttr::clear_pagesize() {
  pagesize_ = 0;
  clear_has_pagesize();
}
inline ::google::protobuf::int32 LinkBaseAttr::pagesize() const {
  return pagesize_;
}
inline void LinkBaseAttr::set_pagesize(::google::protobuf::int32 value) {
  set_has_pagesize();
  pagesize_ = value;
}

// optional string opType = 30;
inline bool LinkBaseAttr::has_optype() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void LinkBaseAttr::set_has_optype() {
  _has_bits_[0] |= 0x20000000u;
}
inline void LinkBaseAttr::clear_has_optype() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void LinkBaseAttr::clear_optype() {
  if (optype_ != &::google::protobuf::internal::kEmptyString) {
    optype_->clear();
  }
  clear_has_optype();
}
inline const ::std::string& LinkBaseAttr::optype() const {
  return *optype_;
}
inline void LinkBaseAttr::set_optype(const ::std::string& value) {
  set_has_optype();
  if (optype_ == &::google::protobuf::internal::kEmptyString) {
    optype_ = new ::std::string;
  }
  optype_->assign(value);
}
inline void LinkBaseAttr::set_optype(const char* value) {
  set_has_optype();
  if (optype_ == &::google::protobuf::internal::kEmptyString) {
    optype_ = new ::std::string;
  }
  optype_->assign(value);
}
inline void LinkBaseAttr::set_optype(const char* value, size_t size) {
  set_has_optype();
  if (optype_ == &::google::protobuf::internal::kEmptyString) {
    optype_ = new ::std::string;
  }
  optype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkBaseAttr::mutable_optype() {
  set_has_optype();
  if (optype_ == &::google::protobuf::internal::kEmptyString) {
    optype_ = new ::std::string;
  }
  return optype_;
}
inline ::std::string* LinkBaseAttr::release_optype() {
  clear_has_optype();
  if (optype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = optype_;
    optype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 outerAnchorLength = 31;
inline bool LinkBaseAttr::has_outeranchorlength() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void LinkBaseAttr::set_has_outeranchorlength() {
  _has_bits_[0] |= 0x40000000u;
}
inline void LinkBaseAttr::clear_has_outeranchorlength() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void LinkBaseAttr::clear_outeranchorlength() {
  outeranchorlength_ = 0;
  clear_has_outeranchorlength();
}
inline ::google::protobuf::int32 LinkBaseAttr::outeranchorlength() const {
  return outeranchorlength_;
}
inline void LinkBaseAttr::set_outeranchorlength(::google::protobuf::int32 value) {
  set_has_outeranchorlength();
  outeranchorlength_ = value;
}

// optional uint32 scheduleTime = 32;
inline bool LinkBaseAttr::has_scheduletime() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void LinkBaseAttr::set_has_scheduletime() {
  _has_bits_[0] |= 0x80000000u;
}
inline void LinkBaseAttr::clear_has_scheduletime() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void LinkBaseAttr::clear_scheduletime() {
  scheduletime_ = 0u;
  clear_has_scheduletime();
}
inline ::google::protobuf::uint32 LinkBaseAttr::scheduletime() const {
  return scheduletime_;
}
inline void LinkBaseAttr::set_scheduletime(::google::protobuf::uint32 value) {
  set_has_scheduletime();
  scheduletime_ = value;
}

// optional int32 errno = 33;
inline bool LinkBaseAttr::has_errno() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void LinkBaseAttr::set_has_errno() {
  _has_bits_[1] |= 0x00000001u;
}
inline void LinkBaseAttr::clear_has_errno() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void LinkBaseAttr::clear_errno() {
  errno_ = 0;
  clear_has_errno();
}
inline ::google::protobuf::int32 LinkBaseAttr::errno() const {
  return errno_;
}
inline void LinkBaseAttr::set_errno(::google::protobuf::int32 value) {
  set_has_errno();
  errno_ = value;
}

// optional string bestInnerLinksHrefPattern = 34;
inline bool LinkBaseAttr::has_bestinnerlinkshrefpattern() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void LinkBaseAttr::set_has_bestinnerlinkshrefpattern() {
  _has_bits_[1] |= 0x00000002u;
}
inline void LinkBaseAttr::clear_has_bestinnerlinkshrefpattern() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void LinkBaseAttr::clear_bestinnerlinkshrefpattern() {
  if (bestinnerlinkshrefpattern_ != &::google::protobuf::internal::kEmptyString) {
    bestinnerlinkshrefpattern_->clear();
  }
  clear_has_bestinnerlinkshrefpattern();
}
inline const ::std::string& LinkBaseAttr::bestinnerlinkshrefpattern() const {
  return *bestinnerlinkshrefpattern_;
}
inline void LinkBaseAttr::set_bestinnerlinkshrefpattern(const ::std::string& value) {
  set_has_bestinnerlinkshrefpattern();
  if (bestinnerlinkshrefpattern_ == &::google::protobuf::internal::kEmptyString) {
    bestinnerlinkshrefpattern_ = new ::std::string;
  }
  bestinnerlinkshrefpattern_->assign(value);
}
inline void LinkBaseAttr::set_bestinnerlinkshrefpattern(const char* value) {
  set_has_bestinnerlinkshrefpattern();
  if (bestinnerlinkshrefpattern_ == &::google::protobuf::internal::kEmptyString) {
    bestinnerlinkshrefpattern_ = new ::std::string;
  }
  bestinnerlinkshrefpattern_->assign(value);
}
inline void LinkBaseAttr::set_bestinnerlinkshrefpattern(const char* value, size_t size) {
  set_has_bestinnerlinkshrefpattern();
  if (bestinnerlinkshrefpattern_ == &::google::protobuf::internal::kEmptyString) {
    bestinnerlinkshrefpattern_ = new ::std::string;
  }
  bestinnerlinkshrefpattern_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkBaseAttr::mutable_bestinnerlinkshrefpattern() {
  set_has_bestinnerlinkshrefpattern();
  if (bestinnerlinkshrefpattern_ == &::google::protobuf::internal::kEmptyString) {
    bestinnerlinkshrefpattern_ = new ::std::string;
  }
  return bestinnerlinkshrefpattern_;
}
inline ::std::string* LinkBaseAttr::release_bestinnerlinkshrefpattern() {
  clear_has_bestinnerlinkshrefpattern();
  if (bestinnerlinkshrefpattern_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bestinnerlinkshrefpattern_;
    bestinnerlinkshrefpattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string initParentPage = 35;
inline bool LinkBaseAttr::has_initparentpage() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void LinkBaseAttr::set_has_initparentpage() {
  _has_bits_[1] |= 0x00000004u;
}
inline void LinkBaseAttr::clear_has_initparentpage() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void LinkBaseAttr::clear_initparentpage() {
  if (initparentpage_ != &::google::protobuf::internal::kEmptyString) {
    initparentpage_->clear();
  }
  clear_has_initparentpage();
}
inline const ::std::string& LinkBaseAttr::initparentpage() const {
  return *initparentpage_;
}
inline void LinkBaseAttr::set_initparentpage(const ::std::string& value) {
  set_has_initparentpage();
  if (initparentpage_ == &::google::protobuf::internal::kEmptyString) {
    initparentpage_ = new ::std::string;
  }
  initparentpage_->assign(value);
}
inline void LinkBaseAttr::set_initparentpage(const char* value) {
  set_has_initparentpage();
  if (initparentpage_ == &::google::protobuf::internal::kEmptyString) {
    initparentpage_ = new ::std::string;
  }
  initparentpage_->assign(value);
}
inline void LinkBaseAttr::set_initparentpage(const char* value, size_t size) {
  set_has_initparentpage();
  if (initparentpage_ == &::google::protobuf::internal::kEmptyString) {
    initparentpage_ = new ::std::string;
  }
  initparentpage_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkBaseAttr::mutable_initparentpage() {
  set_has_initparentpage();
  if (initparentpage_ == &::google::protobuf::internal::kEmptyString) {
    initparentpage_ = new ::std::string;
  }
  return initparentpage_;
}
inline ::std::string* LinkBaseAttr::release_initparentpage() {
  clear_has_initparentpage();
  if (initparentpage_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = initparentpage_;
    initparentpage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string delReason = 36;
inline bool LinkBaseAttr::has_delreason() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void LinkBaseAttr::set_has_delreason() {
  _has_bits_[1] |= 0x00000008u;
}
inline void LinkBaseAttr::clear_has_delreason() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void LinkBaseAttr::clear_delreason() {
  if (delreason_ != &::google::protobuf::internal::kEmptyString) {
    delreason_->clear();
  }
  clear_has_delreason();
}
inline const ::std::string& LinkBaseAttr::delreason() const {
  return *delreason_;
}
inline void LinkBaseAttr::set_delreason(const ::std::string& value) {
  set_has_delreason();
  if (delreason_ == &::google::protobuf::internal::kEmptyString) {
    delreason_ = new ::std::string;
  }
  delreason_->assign(value);
}
inline void LinkBaseAttr::set_delreason(const char* value) {
  set_has_delreason();
  if (delreason_ == &::google::protobuf::internal::kEmptyString) {
    delreason_ = new ::std::string;
  }
  delreason_->assign(value);
}
inline void LinkBaseAttr::set_delreason(const char* value, size_t size) {
  set_has_delreason();
  if (delreason_ == &::google::protobuf::internal::kEmptyString) {
    delreason_ = new ::std::string;
  }
  delreason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkBaseAttr::mutable_delreason() {
  set_has_delreason();
  if (delreason_ == &::google::protobuf::internal::kEmptyString) {
    delreason_ = new ::std::string;
  }
  return delreason_;
}
inline ::std::string* LinkBaseAttr::release_delreason() {
  clear_has_delreason();
  if (delreason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = delreason_;
    delreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 orgLinkNum = 37;
inline bool LinkBaseAttr::has_orglinknum() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void LinkBaseAttr::set_has_orglinknum() {
  _has_bits_[1] |= 0x00000010u;
}
inline void LinkBaseAttr::clear_has_orglinknum() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void LinkBaseAttr::clear_orglinknum() {
  orglinknum_ = 0;
  clear_has_orglinknum();
}
inline ::google::protobuf::int32 LinkBaseAttr::orglinknum() const {
  return orglinknum_;
}
inline void LinkBaseAttr::set_orglinknum(::google::protobuf::int32 value) {
  set_has_orglinknum();
  orglinknum_ = value;
}

// optional int64 browsePV = 38;
inline bool LinkBaseAttr::has_browsepv() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void LinkBaseAttr::set_has_browsepv() {
  _has_bits_[1] |= 0x00000020u;
}
inline void LinkBaseAttr::clear_has_browsepv() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void LinkBaseAttr::clear_browsepv() {
  browsepv_ = GOOGLE_LONGLONG(0);
  clear_has_browsepv();
}
inline ::google::protobuf::int64 LinkBaseAttr::browsepv() const {
  return browsepv_;
}
inline void LinkBaseAttr::set_browsepv(::google::protobuf::int64 value) {
  set_has_browsepv();
  browsepv_ = value;
}

// optional int32 cnDepth = 39;
inline bool LinkBaseAttr::has_cndepth() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void LinkBaseAttr::set_has_cndepth() {
  _has_bits_[1] |= 0x00000040u;
}
inline void LinkBaseAttr::clear_has_cndepth() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void LinkBaseAttr::clear_cndepth() {
  cndepth_ = 0;
  clear_has_cndepth();
}
inline ::google::protobuf::int32 LinkBaseAttr::cndepth() const {
  return cndepth_;
}
inline void LinkBaseAttr::set_cndepth(::google::protobuf::int32 value) {
  set_has_cndepth();
  cndepth_ = value;
}

// optional string parentPageType = 40;
inline bool LinkBaseAttr::has_parentpagetype() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void LinkBaseAttr::set_has_parentpagetype() {
  _has_bits_[1] |= 0x00000080u;
}
inline void LinkBaseAttr::clear_has_parentpagetype() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void LinkBaseAttr::clear_parentpagetype() {
  if (parentpagetype_ != &::google::protobuf::internal::kEmptyString) {
    parentpagetype_->clear();
  }
  clear_has_parentpagetype();
}
inline const ::std::string& LinkBaseAttr::parentpagetype() const {
  return *parentpagetype_;
}
inline void LinkBaseAttr::set_parentpagetype(const ::std::string& value) {
  set_has_parentpagetype();
  if (parentpagetype_ == &::google::protobuf::internal::kEmptyString) {
    parentpagetype_ = new ::std::string;
  }
  parentpagetype_->assign(value);
}
inline void LinkBaseAttr::set_parentpagetype(const char* value) {
  set_has_parentpagetype();
  if (parentpagetype_ == &::google::protobuf::internal::kEmptyString) {
    parentpagetype_ = new ::std::string;
  }
  parentpagetype_->assign(value);
}
inline void LinkBaseAttr::set_parentpagetype(const char* value, size_t size) {
  set_has_parentpagetype();
  if (parentpagetype_ == &::google::protobuf::internal::kEmptyString) {
    parentpagetype_ = new ::std::string;
  }
  parentpagetype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkBaseAttr::mutable_parentpagetype() {
  set_has_parentpagetype();
  if (parentpagetype_ == &::google::protobuf::internal::kEmptyString) {
    parentpagetype_ = new ::std::string;
  }
  return parentpagetype_;
}
inline ::std::string* LinkBaseAttr::release_parentpagetype() {
  clear_has_parentpagetype();
  if (parentpagetype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = parentpagetype_;
    parentpagetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 parentDownloadTime = 41;
inline bool LinkBaseAttr::has_parentdownloadtime() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void LinkBaseAttr::set_has_parentdownloadtime() {
  _has_bits_[1] |= 0x00000100u;
}
inline void LinkBaseAttr::clear_has_parentdownloadtime() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void LinkBaseAttr::clear_parentdownloadtime() {
  parentdownloadtime_ = 0u;
  clear_has_parentdownloadtime();
}
inline ::google::protobuf::uint32 LinkBaseAttr::parentdownloadtime() const {
  return parentdownloadtime_;
}
inline void LinkBaseAttr::set_parentdownloadtime(::google::protobuf::uint32 value) {
  set_has_parentdownloadtime();
  parentdownloadtime_ = value;
}

// optional sint32 httpCode = 42;
inline bool LinkBaseAttr::has_httpcode() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void LinkBaseAttr::set_has_httpcode() {
  _has_bits_[1] |= 0x00000200u;
}
inline void LinkBaseAttr::clear_has_httpcode() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void LinkBaseAttr::clear_httpcode() {
  httpcode_ = 0;
  clear_has_httpcode();
}
inline ::google::protobuf::int32 LinkBaseAttr::httpcode() const {
  return httpcode_;
}
inline void LinkBaseAttr::set_httpcode(::google::protobuf::int32 value) {
  set_has_httpcode();
  httpcode_ = value;
}

// optional int32 innerAnchorLength = 43;
inline bool LinkBaseAttr::has_inneranchorlength() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void LinkBaseAttr::set_has_inneranchorlength() {
  _has_bits_[1] |= 0x00000400u;
}
inline void LinkBaseAttr::clear_has_inneranchorlength() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void LinkBaseAttr::clear_inneranchorlength() {
  inneranchorlength_ = 0;
  clear_has_inneranchorlength();
}
inline ::google::protobuf::int32 LinkBaseAttr::inneranchorlength() const {
  return inneranchorlength_;
}
inline void LinkBaseAttr::set_inneranchorlength(::google::protobuf::int32 value) {
  set_has_inneranchorlength();
  inneranchorlength_ = value;
}

// optional uint32 latestFoundTime = 44;
inline bool LinkBaseAttr::has_latestfoundtime() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void LinkBaseAttr::set_has_latestfoundtime() {
  _has_bits_[1] |= 0x00000800u;
}
inline void LinkBaseAttr::clear_has_latestfoundtime() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void LinkBaseAttr::clear_latestfoundtime() {
  latestfoundtime_ = 0u;
  clear_has_latestfoundtime();
}
inline ::google::protobuf::uint32 LinkBaseAttr::latestfoundtime() const {
  return latestfoundtime_;
}
inline void LinkBaseAttr::set_latestfoundtime(::google::protobuf::uint32 value) {
  set_has_latestfoundtime();
  latestfoundtime_ = value;
}

// optional int32 linksNumAfterQssFilter = 45;
inline bool LinkBaseAttr::has_linksnumafterqssfilter() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void LinkBaseAttr::set_has_linksnumafterqssfilter() {
  _has_bits_[1] |= 0x00001000u;
}
inline void LinkBaseAttr::clear_has_linksnumafterqssfilter() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void LinkBaseAttr::clear_linksnumafterqssfilter() {
  linksnumafterqssfilter_ = 0;
  clear_has_linksnumafterqssfilter();
}
inline ::google::protobuf::int32 LinkBaseAttr::linksnumafterqssfilter() const {
  return linksnumafterqssfilter_;
}
inline void LinkBaseAttr::set_linksnumafterqssfilter(::google::protobuf::int32 value) {
  set_has_linksnumafterqssfilter();
  linksnumafterqssfilter_ = value;
}

// optional int32 linksNumAfterNormalized = 46;
inline bool LinkBaseAttr::has_linksnumafternormalized() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void LinkBaseAttr::set_has_linksnumafternormalized() {
  _has_bits_[1] |= 0x00002000u;
}
inline void LinkBaseAttr::clear_has_linksnumafternormalized() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void LinkBaseAttr::clear_linksnumafternormalized() {
  linksnumafternormalized_ = 0;
  clear_has_linksnumafternormalized();
}
inline ::google::protobuf::int32 LinkBaseAttr::linksnumafternormalized() const {
  return linksnumafternormalized_;
}
inline void LinkBaseAttr::set_linksnumafternormalized(::google::protobuf::int32 value) {
  set_has_linksnumafternormalized();
  linksnumafternormalized_ = value;
}

// optional uint32 downloadTime = 47;
inline bool LinkBaseAttr::has_downloadtime() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void LinkBaseAttr::set_has_downloadtime() {
  _has_bits_[1] |= 0x00004000u;
}
inline void LinkBaseAttr::clear_has_downloadtime() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void LinkBaseAttr::clear_downloadtime() {
  downloadtime_ = 0u;
  clear_has_downloadtime();
}
inline ::google::protobuf::uint32 LinkBaseAttr::downloadtime() const {
  return downloadtime_;
}
inline void LinkBaseAttr::set_downloadtime(::google::protobuf::uint32 value) {
  set_has_downloadtime();
  downloadtime_ = value;
}

// optional int32 contentSize = 48;
inline bool LinkBaseAttr::has_contentsize() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void LinkBaseAttr::set_has_contentsize() {
  _has_bits_[1] |= 0x00008000u;
}
inline void LinkBaseAttr::clear_has_contentsize() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void LinkBaseAttr::clear_contentsize() {
  contentsize_ = 0;
  clear_has_contentsize();
}
inline ::google::protobuf::int32 LinkBaseAttr::contentsize() const {
  return contentsize_;
}
inline void LinkBaseAttr::set_contentsize(::google::protobuf::int32 value) {
  set_has_contentsize();
  contentsize_ = value;
}

// optional int64 parentSearchUV = 49;
inline bool LinkBaseAttr::has_parentsearchuv() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void LinkBaseAttr::set_has_parentsearchuv() {
  _has_bits_[1] |= 0x00010000u;
}
inline void LinkBaseAttr::clear_has_parentsearchuv() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void LinkBaseAttr::clear_parentsearchuv() {
  parentsearchuv_ = GOOGLE_LONGLONG(0);
  clear_has_parentsearchuv();
}
inline ::google::protobuf::int64 LinkBaseAttr::parentsearchuv() const {
  return parentsearchuv_;
}
inline void LinkBaseAttr::set_parentsearchuv(::google::protobuf::int64 value) {
  set_has_parentsearchuv();
  parentsearchuv_ = value;
}

// optional uint32 delTime = 50;
inline bool LinkBaseAttr::has_deltime() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void LinkBaseAttr::set_has_deltime() {
  _has_bits_[1] |= 0x00020000u;
}
inline void LinkBaseAttr::clear_has_deltime() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void LinkBaseAttr::clear_deltime() {
  deltime_ = 0u;
  clear_has_deltime();
}
inline ::google::protobuf::uint32 LinkBaseAttr::deltime() const {
  return deltime_;
}
inline void LinkBaseAttr::set_deltime(::google::protobuf::uint32 value) {
  set_has_deltime();
  deltime_ = value;
}

// optional int32 parentPageDepth = 51;
inline bool LinkBaseAttr::has_parentpagedepth() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void LinkBaseAttr::set_has_parentpagedepth() {
  _has_bits_[1] |= 0x00040000u;
}
inline void LinkBaseAttr::clear_has_parentpagedepth() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void LinkBaseAttr::clear_parentpagedepth() {
  parentpagedepth_ = 0;
  clear_has_parentpagedepth();
}
inline ::google::protobuf::int32 LinkBaseAttr::parentpagedepth() const {
  return parentpagedepth_;
}
inline void LinkBaseAttr::set_parentpagedepth(::google::protobuf::int32 value) {
  set_has_parentpagedepth();
  parentpagedepth_ = value;
}

// optional string pageType = 52;
inline bool LinkBaseAttr::has_pagetype() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void LinkBaseAttr::set_has_pagetype() {
  _has_bits_[1] |= 0x00080000u;
}
inline void LinkBaseAttr::clear_has_pagetype() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void LinkBaseAttr::clear_pagetype() {
  if (pagetype_ != &::google::protobuf::internal::kEmptyString) {
    pagetype_->clear();
  }
  clear_has_pagetype();
}
inline const ::std::string& LinkBaseAttr::pagetype() const {
  return *pagetype_;
}
inline void LinkBaseAttr::set_pagetype(const ::std::string& value) {
  set_has_pagetype();
  if (pagetype_ == &::google::protobuf::internal::kEmptyString) {
    pagetype_ = new ::std::string;
  }
  pagetype_->assign(value);
}
inline void LinkBaseAttr::set_pagetype(const char* value) {
  set_has_pagetype();
  if (pagetype_ == &::google::protobuf::internal::kEmptyString) {
    pagetype_ = new ::std::string;
  }
  pagetype_->assign(value);
}
inline void LinkBaseAttr::set_pagetype(const char* value, size_t size) {
  set_has_pagetype();
  if (pagetype_ == &::google::protobuf::internal::kEmptyString) {
    pagetype_ = new ::std::string;
  }
  pagetype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkBaseAttr::mutable_pagetype() {
  set_has_pagetype();
  if (pagetype_ == &::google::protobuf::internal::kEmptyString) {
    pagetype_ = new ::std::string;
  }
  return pagetype_;
}
inline ::std::string* LinkBaseAttr::release_pagetype() {
  clear_has_pagetype();
  if (pagetype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pagetype_;
    pagetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 linksNumAfterRobotsFilter = 53;
inline bool LinkBaseAttr::has_linksnumafterrobotsfilter() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void LinkBaseAttr::set_has_linksnumafterrobotsfilter() {
  _has_bits_[1] |= 0x00100000u;
}
inline void LinkBaseAttr::clear_has_linksnumafterrobotsfilter() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void LinkBaseAttr::clear_linksnumafterrobotsfilter() {
  linksnumafterrobotsfilter_ = 0;
  clear_has_linksnumafterrobotsfilter();
}
inline ::google::protobuf::int32 LinkBaseAttr::linksnumafterrobotsfilter() const {
  return linksnumafterrobotsfilter_;
}
inline void LinkBaseAttr::set_linksnumafterrobotsfilter(::google::protobuf::int32 value) {
  set_has_linksnumafterrobotsfilter();
  linksnumafterrobotsfilter_ = value;
}

// optional uint32 deadPageTime = 54;
inline bool LinkBaseAttr::has_deadpagetime() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void LinkBaseAttr::set_has_deadpagetime() {
  _has_bits_[1] |= 0x00200000u;
}
inline void LinkBaseAttr::clear_has_deadpagetime() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void LinkBaseAttr::clear_deadpagetime() {
  deadpagetime_ = 0u;
  clear_has_deadpagetime();
}
inline ::google::protobuf::uint32 LinkBaseAttr::deadpagetime() const {
  return deadpagetime_;
}
inline void LinkBaseAttr::set_deadpagetime(::google::protobuf::uint32 value) {
  set_has_deadpagetime();
  deadpagetime_ = value;
}

// optional uint32 deadLinkTime = 55;
inline bool LinkBaseAttr::has_deadlinktime() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void LinkBaseAttr::set_has_deadlinktime() {
  _has_bits_[1] |= 0x00400000u;
}
inline void LinkBaseAttr::clear_has_deadlinktime() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void LinkBaseAttr::clear_deadlinktime() {
  deadlinktime_ = 0u;
  clear_has_deadlinktime();
}
inline ::google::protobuf::uint32 LinkBaseAttr::deadlinktime() const {
  return deadlinktime_;
}
inline void LinkBaseAttr::set_deadlinktime(::google::protobuf::uint32 value) {
  set_has_deadlinktime();
  deadlinktime_ = value;
}

// optional int32 offlinePageType = 56;
inline bool LinkBaseAttr::has_offlinepagetype() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void LinkBaseAttr::set_has_offlinepagetype() {
  _has_bits_[1] |= 0x00800000u;
}
inline void LinkBaseAttr::clear_has_offlinepagetype() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void LinkBaseAttr::clear_offlinepagetype() {
  offlinepagetype_ = 0;
  clear_has_offlinepagetype();
}
inline ::google::protobuf::int32 LinkBaseAttr::offlinepagetype() const {
  return offlinepagetype_;
}
inline void LinkBaseAttr::set_offlinepagetype(::google::protobuf::int32 value) {
  set_has_offlinepagetype();
  offlinepagetype_ = value;
}

// optional uint32 firstDownloadTime = 57;
inline bool LinkBaseAttr::has_firstdownloadtime() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void LinkBaseAttr::set_has_firstdownloadtime() {
  _has_bits_[1] |= 0x01000000u;
}
inline void LinkBaseAttr::clear_has_firstdownloadtime() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void LinkBaseAttr::clear_firstdownloadtime() {
  firstdownloadtime_ = 0u;
  clear_has_firstdownloadtime();
}
inline ::google::protobuf::uint32 LinkBaseAttr::firstdownloadtime() const {
  return firstdownloadtime_;
}
inline void LinkBaseAttr::set_firstdownloadtime(::google::protobuf::uint32 value) {
  set_has_firstdownloadtime();
  firstdownloadtime_ = value;
}

// optional int32 fanyeType = 58;
inline bool LinkBaseAttr::has_fanyetype() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void LinkBaseAttr::set_has_fanyetype() {
  _has_bits_[1] |= 0x02000000u;
}
inline void LinkBaseAttr::clear_has_fanyetype() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void LinkBaseAttr::clear_fanyetype() {
  fanyetype_ = 0;
  clear_has_fanyetype();
}
inline ::google::protobuf::int32 LinkBaseAttr::fanyetype() const {
  return fanyetype_;
}
inline void LinkBaseAttr::set_fanyetype(::google::protobuf::int32 value) {
  set_has_fanyetype();
  fanyetype_ = value;
}

// optional int32 deadLinkAdjustSchedulePriority = 59;
inline bool LinkBaseAttr::has_deadlinkadjustschedulepriority() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void LinkBaseAttr::set_has_deadlinkadjustschedulepriority() {
  _has_bits_[1] |= 0x04000000u;
}
inline void LinkBaseAttr::clear_has_deadlinkadjustschedulepriority() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void LinkBaseAttr::clear_deadlinkadjustschedulepriority() {
  deadlinkadjustschedulepriority_ = 0;
  clear_has_deadlinkadjustschedulepriority();
}
inline ::google::protobuf::int32 LinkBaseAttr::deadlinkadjustschedulepriority() const {
  return deadlinkadjustschedulepriority_;
}
inline void LinkBaseAttr::set_deadlinkadjustschedulepriority(::google::protobuf::int32 value) {
  set_has_deadlinkadjustschedulepriority();
  deadlinkadjustschedulepriority_ = value;
}

// optional string garbageType = 60;
inline bool LinkBaseAttr::has_garbagetype() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void LinkBaseAttr::set_has_garbagetype() {
  _has_bits_[1] |= 0x08000000u;
}
inline void LinkBaseAttr::clear_has_garbagetype() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void LinkBaseAttr::clear_garbagetype() {
  if (garbagetype_ != &::google::protobuf::internal::kEmptyString) {
    garbagetype_->clear();
  }
  clear_has_garbagetype();
}
inline const ::std::string& LinkBaseAttr::garbagetype() const {
  return *garbagetype_;
}
inline void LinkBaseAttr::set_garbagetype(const ::std::string& value) {
  set_has_garbagetype();
  if (garbagetype_ == &::google::protobuf::internal::kEmptyString) {
    garbagetype_ = new ::std::string;
  }
  garbagetype_->assign(value);
}
inline void LinkBaseAttr::set_garbagetype(const char* value) {
  set_has_garbagetype();
  if (garbagetype_ == &::google::protobuf::internal::kEmptyString) {
    garbagetype_ = new ::std::string;
  }
  garbagetype_->assign(value);
}
inline void LinkBaseAttr::set_garbagetype(const char* value, size_t size) {
  set_has_garbagetype();
  if (garbagetype_ == &::google::protobuf::internal::kEmptyString) {
    garbagetype_ = new ::std::string;
  }
  garbagetype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkBaseAttr::mutable_garbagetype() {
  set_has_garbagetype();
  if (garbagetype_ == &::google::protobuf::internal::kEmptyString) {
    garbagetype_ = new ::std::string;
  }
  return garbagetype_;
}
inline ::std::string* LinkBaseAttr::release_garbagetype() {
  clear_has_garbagetype();
  if (garbagetype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = garbagetype_;
    garbagetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 pageModifyDate = 61;
inline bool LinkBaseAttr::has_pagemodifydate() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void LinkBaseAttr::set_has_pagemodifydate() {
  _has_bits_[1] |= 0x10000000u;
}
inline void LinkBaseAttr::clear_has_pagemodifydate() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void LinkBaseAttr::clear_pagemodifydate() {
  pagemodifydate_ = 0u;
  clear_has_pagemodifydate();
}
inline ::google::protobuf::uint32 LinkBaseAttr::pagemodifydate() const {
  return pagemodifydate_;
}
inline void LinkBaseAttr::set_pagemodifydate(::google::protobuf::uint32 value) {
  set_has_pagemodifydate();
  pagemodifydate_ = value;
}

// optional int32 childNum = 62;
inline bool LinkBaseAttr::has_childnum() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void LinkBaseAttr::set_has_childnum() {
  _has_bits_[1] |= 0x20000000u;
}
inline void LinkBaseAttr::clear_has_childnum() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void LinkBaseAttr::clear_childnum() {
  childnum_ = 0;
  clear_has_childnum();
}
inline ::google::protobuf::int32 LinkBaseAttr::childnum() const {
  return childnum_;
}
inline void LinkBaseAttr::set_childnum(::google::protobuf::int32 value) {
  set_has_childnum();
  childnum_ = value;
}

// optional int32 goodChildNum = 63;
inline bool LinkBaseAttr::has_goodchildnum() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void LinkBaseAttr::set_has_goodchildnum() {
  _has_bits_[1] |= 0x40000000u;
}
inline void LinkBaseAttr::clear_has_goodchildnum() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void LinkBaseAttr::clear_goodchildnum() {
  goodchildnum_ = 0;
  clear_has_goodchildnum();
}
inline ::google::protobuf::int32 LinkBaseAttr::goodchildnum() const {
  return goodchildnum_;
}
inline void LinkBaseAttr::set_goodchildnum(::google::protobuf::int32 value) {
  set_has_goodchildnum();
  goodchildnum_ = value;
}

// optional int32 goodParentStatNum = 64;
inline bool LinkBaseAttr::has_goodparentstatnum() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void LinkBaseAttr::set_has_goodparentstatnum() {
  _has_bits_[1] |= 0x80000000u;
}
inline void LinkBaseAttr::clear_has_goodparentstatnum() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void LinkBaseAttr::clear_goodparentstatnum() {
  goodparentstatnum_ = 0;
  clear_has_goodparentstatnum();
}
inline ::google::protobuf::int32 LinkBaseAttr::goodparentstatnum() const {
  return goodparentstatnum_;
}
inline void LinkBaseAttr::set_goodparentstatnum(::google::protobuf::int32 value) {
  set_has_goodparentstatnum();
  goodparentstatnum_ = value;
}

// optional bool isExpired = 65;
inline bool LinkBaseAttr::has_isexpired() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void LinkBaseAttr::set_has_isexpired() {
  _has_bits_[2] |= 0x00000001u;
}
inline void LinkBaseAttr::clear_has_isexpired() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void LinkBaseAttr::clear_isexpired() {
  isexpired_ = false;
  clear_has_isexpired();
}
inline bool LinkBaseAttr::isexpired() const {
  return isexpired_;
}
inline void LinkBaseAttr::set_isexpired(bool value) {
  set_has_isexpired();
  isexpired_ = value;
}

// optional int32 parentSeedLevel = 66;
inline bool LinkBaseAttr::has_parentseedlevel() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void LinkBaseAttr::set_has_parentseedlevel() {
  _has_bits_[2] |= 0x00000002u;
}
inline void LinkBaseAttr::clear_has_parentseedlevel() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void LinkBaseAttr::clear_parentseedlevel() {
  parentseedlevel_ = 0;
  clear_has_parentseedlevel();
}
inline ::google::protobuf::int32 LinkBaseAttr::parentseedlevel() const {
  return parentseedlevel_;
}
inline void LinkBaseAttr::set_parentseedlevel(::google::protobuf::int32 value) {
  set_has_parentseedlevel();
  parentseedlevel_ = value;
}

// optional int32 forbid = 67;
inline bool LinkBaseAttr::has_forbid() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void LinkBaseAttr::set_has_forbid() {
  _has_bits_[2] |= 0x00000004u;
}
inline void LinkBaseAttr::clear_has_forbid() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void LinkBaseAttr::clear_forbid() {
  forbid_ = 0;
  clear_has_forbid();
}
inline ::google::protobuf::int32 LinkBaseAttr::forbid() const {
  return forbid_;
}
inline void LinkBaseAttr::set_forbid(::google::protobuf::int32 value) {
  set_has_forbid();
  forbid_ = value;
}

// optional bool isInIndex = 68;
inline bool LinkBaseAttr::has_isinindex() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void LinkBaseAttr::set_has_isinindex() {
  _has_bits_[2] |= 0x00000008u;
}
inline void LinkBaseAttr::clear_has_isinindex() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void LinkBaseAttr::clear_isinindex() {
  isinindex_ = false;
  clear_has_isinindex();
}
inline bool LinkBaseAttr::isinindex() const {
  return isinindex_;
}
inline void LinkBaseAttr::set_isinindex(bool value) {
  set_has_isinindex();
  isinindex_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace LinkBase

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_linkbase_2eproto__INCLUDED
